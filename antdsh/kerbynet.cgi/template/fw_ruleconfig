<html>
<head><link rel='stylesheet' type='text/css' href='/default.css'>
<title>Rule config</title>
<style type="text/css">
<!--
td.red {
  color: #000080;
  background: #ffd0d0;
}
td.green {
  color: #000080;
  background: #d0ffd0;
}
td.dark {
  color: #0000c0;
  background: #f0f0f0;
}
td.yellow {
  color: #000080;
  background: #fff040;
}
td.blue {
  color: #000080;
  background: #60f0f0;
}
-->
</style>
<script>
<xinclude ip_utility.inc>
var ProtoDes=new Array();
function ValidateIPTPARAMS() {
  X=document.data;
  X.IPTPARAMS.value=X.IPTPARAMS.value.replace(/"/g,"'"); 
}
function iptman() {
   newwin=open("kerbynet?Action=Render&Object=iptables_man&STk=<xvar STk>", "Manual","top=250,left=200,width=850,height=500,scrollbars=yes,menubar=no,toolbar=no,statusbar=no");
   newwin.focus();
}
function ActionChanged() {
  X=document.data;
  TD=document.getElementById("ActionTD");
  if (X.Chain.value!="QoS" && X.Chain.value!="NetBalancer") {
    TD.innerHTML="<b>ACTION</b>";
    if (X.Target.value=="DROP" || X.Target.value=="REJECT") {
      TD.className='red';
    } else {
      if (X.Target.value!="RETURN") {
        TD.className='green';
      } else {
        if ("<xvar Policy>"=="DROP") {
           TD.className='red';
        } else {
           TD.className='green';
        }
      }
    }
    if (X.Target.value=="REJECT") {
      ActionParamWrite('\
&nbsp;with <select name=RejectWith>\
<option value="icmp-port-unreachable">icmp port unreachable</option>\
<option value="icmp-net-unreachable">icmp net unreachable</option>\
<option value="icmp-host-unreachable">icmp host unreachable</option>\
<option value="icmp-proto-unreachable">icmp proto unreachable</option>\
<option value="icmp-net-prohibited">icmp net prohibited</option>\
<option value="icmp-host-prohibited">icmp host prohibited</option>\
<option value="icmp-admin-prohibited">icmp admin prohibited</option>\
</select>\
      ');
       X.RejectWith.value="<xvar RejectWith>";
    } else if (X.Target.value=="CHAIN") {
      ActionParamWrite('\
Jump to&nbsp;&nbsp;<select name=ChainToJump>\<xvar !fw_listchains jump></select>\
    ');
      X.ChainToJump.value="<xvar ChainToJump>";
    } else {
      ActionParamWrite('<hr>');
    }
  } else {
    if (X.Chain.value=="QoS") {
      TD.innerHTML="<b>TARGET CLASS</b>";
      TD.className='yellow';
    } else {
      TD.innerHTML="<b>TARGET GATEWAY</b>";
      TD.className='blue';

    }
  }
}
function loaded() {
  X=document.data;
  TD=document.getElementById("ChainTD");
  if (X.Chain.value=="QoS") {
     TD.className='yellow';
  } else {
     if (X.Chain.value=="NetBalancer") {
       TD.className='blue';
     } else {
       if ("<xvar Policy>"=="DROP") {
         TD.className='red';
       } else {
         TD.className='green';
       }
     }
  }
  TD=document.getElementById("ApplyToTD");
  if ("<xvar Chain>"=="FORWARD" || "<xvar Chain>"=="QoS") {
    TD.innerHTML='<font class=Smaller1>&nbsp;Apply to&nbsp;</font><select name=ForwardType><option value="">Routed and Bridged Packets</option><option value="Routed">Routed Packets Only</option><option value="Bridged">Bridged Packets Only</option>';
    X.ForwardType.value="<xvar ForwardType>";
  }
  if ("<xvar Sequence>"=="") {
    Seq="<xvar Rule>";Seq=Seq.replace(/^0+/,"");
    document.data.Sequence.value=parseInt(Seq);
  }
  if ("<xvar Target>"!="") {
    X.Target.value="<xvar Target>"
  } else {
    if ("<xvar Chain>"=="QoS") {
      X.Target.value="DEFAULT";
    } else {
      if ("<xvar Chain>"=="NetBalancer") {
        X.Target.value="Auto";
      } else {
        X.Target.value="ACCEPT";
      }
    }
  }
  ActionChanged();
  X.Protocol.value="<xvar Protocol>"
  <xvar !fw_protdes>
  changeProtocol();
  if ("<xvar Chain>"=="FORWARD" || "<xvar Chain>"=="INPUT" || "<xvar Chain>"=="QoS" || "<xvar Chain>"=="NetBalancer") {
    X.Input.value="<xvar Input>";
  } else {
    X.Input.disabled=true;
    X.SourceMAC.disabled=true;
  }
  if ("<xvar Chain>"=="FORWARD" || "<xvar Chain>"=="OUTPUT" || "<xvar Chain>"=="QoS") {
    X.Output.value="<xvar Output>";
  } else {
    X.Output.disabled=true;
  }
  X.FromHH.value="<xvar FromHH>";
  X.FromMM.value="<xvar FromMM>";
  X.ToHH.value="<xvar ToHH>";
  X.ToMM.value="<xvar ToMM>";
  X.LogLimitSuffix.value="<xvar LogLimitSuffix>";
  X.L7Protocol.value="<xvar _L7Protocol>"; 
  if ("<xvar ParallelThan>" == "less") {
    X.ParallelThan.value="less";
  } else {
    X.ParallelThan.value="more";
  }
  if ("<xvar TrafficThan>" == "less") {
    X.TrafficThan.value="less";
  } else {
    X.TrafficThan.value="more";
  }
  if ("<xvar TrafficUnit>" == "KB") {
    X.TrafficUnit.value="KB";
  } else {
    X.TrafficUnit.value="MB";
  }
  X.DSCP.value="<xvar DSCP>"
}
function IncSeq() {
  document.data.Sequence.value=parseInt(document.data.Sequence.value);
  if (document.data.Sequence.value=="NaN") {
    document.data.Sequence.value=parseInt("<xvar Rule>");
  }
  if (document.data.Sequence.value<999 && document.data.Sequence.value<<xvar maxSequence>) document.data.Sequence.value++;
}
function DecSeq() {
  document.data.Sequence.value=parseInt(document.data.Sequence.value);
  if (document.data.Sequence.value=="NaN") {
    document.data.Sequence.value=parseInt("<xvar Rule>");
  }
  if (document.data.Sequence.value>1) document.data.Sequence.value--;
}
function tcp_selected() {
ProtoWrite('\
<table width=100% cellspacing=0 cellpadding=0><tr>\
<td><font class=Smaller1>&nbsp;Source Port <input type=checkbox name=NotSourcePort value=checked <xvar NotSourcePort>>Not</font><br>&nbsp;<input type=text name=SourcePort value="<xvar SourcePort>" size=11 maxlength=11 onchange="ValidatePort(this)"></td>\
<td><font class=Smaller1>Dest. Port&nbsp;&nbsp;&nbsp;<input type=checkbox name=NotDestinationPort value=checked <xvar NotDestinationPort>>Not</font><br><input type=text name=DestinationPort value="<xvar DestinationPort>" size=11 maxlength=11 onchange="ValidatePort(this)"></td>\
<td><font class=Smaller1>Opt&nbsp;&nbsp;<input type=checkbox name=NotOpt value=checked <xvar NotOpt>>Not</font><br><input type=text name=Opt value="<xvar Opt>"onchange="ValidateTCPOption(this)" size=5 maxlength=3></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>&nbsp;&nbsp;&nbsp;Flags<br><input type=checkbox name=NotFlags value=checked <xvar NotFlags>>Not</font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>SYN<br><select Name=SYN style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>ACK<br><select Name=ACK style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>FIN<br><select Name=FIN style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>RST<br><select Name=RST style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>URG<br><select Name=URG style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
<td align=center bgcolor=#e8e8e8><font class=Smaller1>PSH<br><select Name=PSH style="font-size: 8pt;"><option value=""></option><option value="On">On</option><option value="Off">Off</option></select></font></td>\
</tr></table>\
');
  document.data.SYN.value="<xvar SYN>";
  document.data.ACK.value="<xvar ACK>";
  document.data.FIN.value="<xvar FIN>";
  document.data.RST.value="<xvar RST>";
  document.data.URG.value="<xvar URG>";
  document.data.PSH.value="<xvar PSH>";
}
function icmp_selected() {
  proto=1;
  ProtoWrite('\
<table width=100% cellspacing=0 cellpadding=0><tr>\
<td>&nbsp;&nbsp;&nbsp;('+proto+')<font class=Bigger1 color=#808080>&nbsp;&nbsp;'+ProtoDes[proto]+'</font></td>\
<td nowrap width=1%><font class=Smaller1>ICMP Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=NotICMPTYPE value=checked <xvar NotICMPTYPE>>Not</font><br><select name=ICMPTYPE>\
<option value="">any</option>\
<option value=echo-request>echo-request (ping)</option>\
<option value=echo-reply>echo-reply (pong)</option>\
<option value=destination-unreachable>destination-unreachable</option>\
<option value=network-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network-unreachable</option>\
<option value=host-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host-unreachable</option>\
<option value=protocol-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protocol-unreachable</option>\
<option value=port-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port-unreachable</option>\
<option value=fragmentation-needed>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fragmentation-needed</option>\
<option value=source-route-failed>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source-route-failed</option>\
<option value=network-unknown>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network-unknown</option>\
<option value=host-unknown>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host-unknown</option>\
<option value=network-prohibited>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network-prohibited</option>\
<option value=host-prohibited>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host-prohibited</option>\
<option value=TOS-network-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOS-network-unreachable</option>\
<option value=TOS-host-unreachable>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOS-host-unreachable</option>\
<option value=communication-prohibited>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;communication-prohibited</option>\
<option value=host-precedence-violation>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host-precedence-violation</option>\
<option value=precedence-cutoff>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;precedence-cutoff</option>\
<option value=source-quench>source-quench</option>\
<option value=redirect>redirect</option>\
<option value=network-redirect>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network-redirect</option>\
<option value=host-redirect>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host-redirect</option>\
<option value=TOS-network-redirect>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOS-network-redirect</option>\
<option value=TOS-host-redirect>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOS-host-redirect</option>\
<option value=router-advertisement>router-advertisement</option>\
<option value=router-solicitation>router-solicitation</option>\
<option value=time-exceeded>time-exceeded (ttl-exceeded)</option>\
<option value=ttl-zero-during-transit>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ttl-zero-during-transit</option>\
<option value=ttl-zero-during-reassembly>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ttl-zero-during-reassembly</option>\
<option value=parameter-problem>parameter-problem</option>\
<option value=ip-header-bad>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip-header-bad</option>\
<option value=required-option-missing>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;required-option-missing</option>\
<option value=timestamp-request>timestamp-request</option>\
<option value=timestamp-reply>timestamp-reply</option>\
<option value=address-mask-request>address-mask-request</option>\
<option value=address-mask-reply>address-mask-reply</option>\
</select></td></tr>');
  document.data.ICMPTYPE.value="<xvar ICMPTYPE>";
}
function udp_selected() {
  proto=17;
  ProtoWrite('\
<table width=100% cellspacing=0 cellpadding=0><tr>\
<td>&nbsp;&nbsp;&nbsp;('+proto+')<font class=Bigger1 color=#808080>&nbsp;&nbsp;'+ProtoDes[proto]+'</font></td>\
<td nowrap width=1%><font class=Smaller1>&nbsp;Source Port <input type=checkbox name=NotSourcePortUDP value=checked <xvar NotSourcePortUDP>>Not</font><br>&nbsp;<input type=text name=SourcePortUDP value="<xvar SourcePortUDP>" size=11 maxlength=11 onchange="ValidatePort(this)">&nbsp;&nbsp;<font class=Smaller1>(**)</font>&nbsp;&nbsp;&nbsp;&nbsp;</td>\
<td nowrap width=1%><font class=Smaller1>Dest. Port&nbsp;&nbsp;&nbsp;<input type=checkbox name=NotDestinationPortUDP value=checked <xvar NotDestinationPortUDP>>Not</font><br><input type=text name=DestinationPortUDP value="<xvar DestinationPortUDP>"size=11 maxlength=11 onchange="ValidatePort(this)">&nbsp;&nbsp;<font class=Smaller1>(**)</font>&nbsp;&nbsp;</td>\
</tr>');
}
function ProtoWrite(htmlcontent) {
  var tableElem = document.getElementById('prototab');
  var rowElem = tableElem.rows[0];
  rowElem.cells[1].innerHTML=htmlcontent;
}
function ActionParamWrite(htmlcontent) {
  TD=document.getElementById('ActionParamTD');
  TD.innerHTML=htmlcontent;
}
function changeProtocol() {
  proto=document.data.Protocol.value;
  if (!document.data.NotProtocol.checked) {
    if (proto==1) {
      icmp_selected();
      return;
    }
    if (proto==6) {
      tcp_selected();
      return;
    }
    if (proto==17) {
      udp_selected();
      return;
    }
  }
  if (proto!="") {
   if (!document.data.NotProtocol.checked) {
     ProtoWrite("&nbsp;&nbsp;&nbsp;("+proto+")<font class=Bigger1 color=#808080>&nbsp;&nbsp;"+ProtoDes[proto]+"</font>");
   } else {
     ProtoWrite("&nbsp;&nbsp;&nbsp;<font class=Bigger1 color=#ff4040>Match all Layer 4 Protocols except ("+proto+") "+ProtoDes[proto]+"</font>");
   }
  } else {
   ProtoWrite("<font class=Bigger1 color=#808080>&nbsp;&nbsp;&nbsp;Match all Layer 4 Protocols</font>");
  }
}
function writeSelect(begin,end,selected) {
   document.write("<option value=''></option>");
   for (i=begin;i<=end;i++) {
      document.write("<option value='"+(i<10?"0":"")+i+"'>"+(i<10?"0":"")+i+"</option>");
   }
}
function ValidateIP(ipobj) {
  ipobj.value=ipobj.value.replace(/[ ]+/g,"");
  if (ipobj.value=="") return true;
  if (!isValidIP(ipobj.value)) {
    if ((p=ipobj.value.indexOf('-'))!=-1) {
      IP1=ipobj.value.substr(0,p);
      IP2=ipobj.value.substr(p+1);
      if (!isValidIP(IP1)) {
        alert("The first IP address of the range "+ipobj.value+" is not valid.");
        ipobj.focus();
        ipobj.select();
        return false;
      }
      if (!isValidIP(IP2)) {
        alert("The second IP address of the range "+ipobj.value+" is not valid.");
        ipobj.focus();
        ipobj.select();
        return false;
      }
      if (ip2num(IP1)>=ip2num(IP2)) {
        alert("The second IP address of the range must be greater than the first one");
        ipobj.focus();
        ipobj.select();
        return false;
      }
      return true;
    }
    if ((p=ipobj.value.indexOf('/'))!=-1) {
      Network=ipobj.value.substr(0,p);
      Netmask=ipobj.value.substr(p+1);
      if (!isValidNetworkCIDR(Network,Netmask)) {
        alert(ipobj.value+" is not a valid network.");
        ipobj.focus();
        ipobj.select();
        return false;
      }
      return true;
    }
    alert("The IP address is not valid.");
    ipobj.focus();
    ipobj.select();
    return false;
  } else {
    return true;
  }
}



function ValidateLength(MinLen,MaxLen) {
  MinLen.value=MinLen.value.replace(/[^0123456789]+/g,"");
  MaxLen.value=MaxLen.value.replace(/[^0123456789]+/g,"");
  if (MinLen.value=="" && MaxLen.value=="") return true;
  if (MinLen.value!="") {
    MinLen.value=parseInt(MinLen.value,10);
  } 
  if (MaxLen.value!="") {
    MaxLen.value=parseInt(MaxLen.value,10);
  }
  if (MinLen.value=="") {
    MinLen.value="0";
  }
  if (MaxLen.value=="") {
    MaxLen.value="65535";
  }
  if (MinLen.value>65535) {
    alert("Incorrect value for the minimum packet length (0-65535).");
    MinLen.select();
    MinLen.focus();
    return false;
  }  
  if (MaxLen.value>65535) {
    alert("Incorrect value for the maximum packet length (0-65535).");
    MaxLen.select();
    MaxLen.focus();
    return false;
  }  
  if (parseInt(MinLen.value)>parseInt(MaxLen.value)) {
    alert("Incorrect interval "+MinLen.value+" - "+MaxLen.value);
    MinLen.select();
    MinLen.focus();
    return false;
  }
  return true;
}


function ValidateMAC(MACobj) {
  MACobj.value=MACobj.value.replace(/[ ]+/g,"");
  if (MACobj.value=="") return true;
  if (!isValidMAC(MACobj.value)) {
    alert("The MAC Address is not valid. A valid MAC could be 11:22:33:AB:CD:EF.");
    MACobj.focus();
    MACobj.select();
    return false;
  }
  MACobj.value=formatMAC(MACobj.value);
  return true;   
}
function ValidateTCPOption(optobj) {
  optobj.value=optobj.value.replace(/[ ]+/g,"");
  if (optobj.value=="") return true;
  if ((optobj.value.replace(/[^0123456789]+/g,"")!=optobj.value) || optobj.value<1 || optobj.value>255) {
    alert("The TCP option field is not in the range from 1 to 255.");
    optobj.focus();
    optobj.select();
    return false;
  }
  return true;   
}
function ValidatePort(pobj) {
  pobj.value=pobj.value.replace(/[ ]+/g,"");
  if (pobj.value=="") return true;
  if (pobj.value.replace(/[^0123456789:]+/g,"")!=pobj.value) {
    port="100000";
  } else {
    port=pobj.value;
  }
  if (port>=0 && port<=65535) {
    return true;
  }
  if ((p=port.indexOf(':'))!=-1) {
    PortMIN=port.substr(0,p);
    PortMAX=port.substr(p+1);
    if (PortMIN<0 || PortMIN>65535) {
      alert("The first port of the range "+port+" is not valid.");
      pobj.focus();
      pobj.select();
      return false;
    }
    if (PortMAX<0 || PortMAX>65535) {
      alert("The second port of the range "+port+" is not valid.");
      pobj.focus();
      pobj.select();
      return false;
    }
    if (parseInt(PortMIN)>=parseInt(PortMAX)) {
      alert("The second port of the range must be greater than the first one");
      pobj.focus();
      pobj.select();
      return false;
    }
    return true; 
  }
  alert("Invalid port specification. A valid port is an integer in the range from 0 to 65535.");
  pobj.focus();
  pobj.select();
  return false;
}
function ValidateLogLimit(LogLimitobj) {
  LogLimitobj.value=LogLimitobj.value.replace(/[ ]+/g,"");
  if (LogLimitobj.value=="") return true;
  if (LogLimitobj.value.replace(/[^0123456789]+/g,"")!=LogLimitobj.value) {
    Limit="1000000000";
  } else {
    Limit=LogLimitobj.value;
  }
  if (Limit<1 || Limit>9999) {
    alert("Log limit must be an integer in the range from 1 to 9999.");
    LogLimitobj.focus();
    LogLimitobj.select();
    return false;
  }
  return true;
}
function ValidateLogBurst(LogBurstobj) {
  LogBurstobj.value=LogBurstobj.value.replace(/[ ]+/g,"");
  if (LogBurstobj.value=="") return true;
  if (LogBurstobj.value.replace(/[^0123456789]+/g,"")!=LogBurstobj.value) {
    Burst="1000000000";
  } else {
    Burst=LogBurstobj.value;
  }
  if (Burst<1 || Burst>9999) {
    alert("Log burst must be an integer in the range from 1 to 9999.");
    LogBurstobj.focus();
    LogBurstobj.select();
    return false;
  }
  return true;
}
function ValidateLog() {
  X=document.data;
  if (X.LogEnabled.checked) {
    X.LogLimit.value=X.LogLimit.value.replace(/[ ]+/g,"");
    X.LogBurst.value=X.LogBurst.value.replace(/[ ]+/g,"");
    if (X.LogLimit.value=="") {
      X.LogLimit.value=10;
      X.LogLimitSuffix.value="minute";
    }
    burst=1.5*X.LogLimit.value;
    if (X.LogBurst.value=="") X.LogBurst.value=Math.min(Math.floor(burst),9999);
  }
}
function SubmitData() {
  var X=document.data;
  ValidateIPTPARAMS();
  if (!ValidateIP(X.SourceIP)) return;
  if (!ValidateIP(X.DestinationIP)) return;
  if (!ValidateLength(X.MinLen,X.MaxLen)) return;
  if (!ValidateMAC(X.SourceMAC)) return;
  if (!X.NotProtocol.checked) {
    if (proto==6) {
      if (!ValidatePort(X.SourcePort)) return;
      if (!ValidatePort(X.DestinationPort)) return;
      if (!ValidateTCPOption(X.Opt)) return;
    }
    if (proto==17) {
      if (!ValidatePort(X.SourcePortUDP)) return;
      if (!ValidatePort(X.SourcePortUDP)) return;
    }
  }



  if (X.Parallel.value!="") {
    X.Parallel.value=parseInt(X.Parallel.value); 
    if (X.Parallel.value=="NaN") {
      X.Parallel.value="";
      alert("Parallel connections per IP must be an integer value.");
      X.Parallel.focus();
      return;
    } else {
      if (X.Parallel.value<0 || X.Parallel.value>4294967295) {
        alert("Parallel connections per IP must be an integer value in the range 0 - 4294967295");
        X.Parallel.focus();
        X.Parallel.select();
        return;
      }
    }
  }


  if (X.Traffic.value!="") {
    X.Traffic.value=parseInt(X.Traffic.value); 
    if (X.Traffic.value=="NaN") {
      X.Traffic.value="";
      alert("The amount of traffic must be an integer value.");
      X.Traffic.focus();
      return;
    } else {
      if (X.TrafficUnit.value=="KB") {
        if (X.Traffic.value<0 || X.Traffic.value>4194304) {
          alert("The amount of traffic must be an integer value in the range 0 - 4194304 (KB)");
          X.Traffic.focus();
          X.Traffic.select();
          return;
        }
      } else {
        if (X.Traffic.value<0 || X.Traffic.value>4096) {
          alert("The amount of traffic must be an integer value in the range 0 - 4096 (MB)");
          X.Traffic.focus();
          X.Traffic.select();
          return;
        }

      }

    }


  }
  if (!ValidateLogLimit(X.LogLimit)) return;
  if (!ValidateLogBurst(X.LogBurst)) return;
  ValidateLog();
  X.ConfirmB.disabled=true;
  X.CloseB.disabled=true;
  X.submit();
}
function l7manage() {
   X=document.data;
   newwin=open("kerbynet?Section=FW&STk=<xvar STk>&Action=L7Manager&Group=all&Protocol="+X.L7Protocol.value, "L7Manager","top=250,left=250,width=650,height=450,scrollbars=yes,menubar=no,toolbar=no,statusbar=no");
   newwin.focus();
}

</script>
</head>
<body onload="loaded()">
<form name=data method=post action="kerbynet">
<input type=hidden name=Section value=FW>
<input type=hidden name=Action value="<xvar Action>Submit"><input type=hidden name=STk value=<xvar STk>>
<input type=hidden name=Chain value="<xvar Chain>">
<input type=hidden name=Rule value="<xvar Rule>">
<input type=hidden name=maxSequence value="<xvar maxSequence>">
<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td id=ChainTD align=center width=30%><font face="Arial" color="#0000F0" class=Bigger1><b><xvar Chain></b></font></td><td align=right width=20% nowrap id=ApplyToTD><hr></td><td align=right nowrap>&nbsp;Sequence <input type=text name=Sequence size=3 maxlength=3 value="<xvar _Sequence>"><input type=button value=" + " onclick="IncSeq()" style="height:20; width:25;"><input type=button value=" - " onclick="DecSeq()" style="height:20; width:25;"></td><td align=right width=1% nowrap><input type=button name=ConfirmB value=Confirm onclick="SubmitData()"><input type=button name=CloseB value=Close onclick="window.close()"></td>
</tr></table>
<br>
<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td width=20% align=center class=dark><font class=Bigger2>Packet</font><br><font class=Bigger1>Matching</font></td>
<td>
<table width=100% cellspacing=0 cellpadding=0>
<tr bgcolor=#9090f0><td><font color=#ffffff><b>&nbsp;&nbsp;&nbsp;Description</font></td><td><font color=#ffffff><b>&nbsp;Value</font></td><td align=right width=%1 nowrap><font color=#ffffff><b>&nbsp;Not&nbsp;</font></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Input</td><td><select name=Input><option value=""></option><xvar !fw_interfaces></select></td><td align=right><input type=checkbox name=NotInput value=checked <xvar NotInput>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Output</td><td><select name=Output><option value=""></option><xvar !fw_interfaces></select></td><td align=right><input type=checkbox name=NotOutput value=checked <xvar NotOutput>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Source IP <font class=Smaller1>(*)</font></td><td><input type=text name=SourceIP size=31 maxlength=31 onchange="ValidateIP(this)" value="<xvar SourceIP>"></td><td align=right><input type=checkbox name=NotSourceIP value=checked <xvar NotSourceIP>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Destination IP</td><td><input type=text name=DestinationIP size=31 maxlength=31 onchange="ValidateIP(this)" value="<xvar DestinationIP>"></td><td align=right><input type=checkbox name=NotDestinationIP value=checked <xvar NotDestinationIP>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Fragments</td><td>[<input type=checkbox name=Fragments value=checked <xvar Fragments>><font class=Smaller1>match only second and further fragments</font> ]</td><td align=right><input type=checkbox name=NotFragments value=checked <xvar NotFragments>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Packet Length</td><td><input type=text name=MinLen maxlength=5 size=5 value="<xvar MinLen>"> - <input type=text name=MaxLen maxlength=5 size=5 value="<xvar MaxLen>"></td><td align=right><input type=checkbox name=NotLen value=checked <xvar NotLen>></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;Source MAC</td><td><input type=text name=SourceMAC maxlength=17 onchange="ValidateMAC(this)" value="<xvar SourceMAC>"></td><td align=right><input type=checkbox name=NotSourceMAC value=checked <xvar NotSourceMAC>></td></tr>
</table>
</td>
</tr></table>
<table width=100% border=1 id=prototab style="border-collapse: collapse" bordercolor="#C0C0C0" cellpadding=3><tr>
<td class=dark width=20% nowrap>&nbsp;&nbsp;Protocol Matching&nbsp;&nbsp;&nbsp;<input type=checkbox name=NotProtocol value=checked <xvar NotProtocol> onclick="changeProtocol()"><font class=Smaller1>Not</font><br>&nbsp;&nbsp;<select name=Protocol onchange="changeProtocol()"><option value="">ALL</option><option value=1>ICMP</option><option value=6>TCP</option><option value=17>UDP</option><xvar !fw_protocols></select></td>
<td></td>
</tr></table>
<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td align=center class=dark width=20%>Connection State&nbsp;&nbsp;<input type=checkbox name=NotState value=checked <xvar NotState>><font class=Smaller1>Not</font></td>
<td align=center><font class=Smaller1>
<input type=checkbox name=NEW value=checked <xvar NEW>>NEW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type=checkbox name=ESTABLISHED value=checked <xvar ESTABLISHED>>ESTABLISHED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type=checkbox name=RELATED value=checked <xvar RELATED>>RELATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type=checkbox name=INVALID value=checked <xvar INVALID>>INVALID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type=checkbox name=UNTRACKED value=checked <xvar UNTRACKED>>UNTRACKED
</font>
</td>
</tr></table>


<table width=100% border=1 cellpadding=3 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td align=center class=dark width=20%>IPTABLES Parameters</td>
<td align=center><font>
<input type=text name=IPTPARAMS style="font-size: 8pt; width: 100%"; value="<xvar _IPTPARAMS>" onchange="ValidateIPTPARAMS()">
</td>
<td width=1%>
<input type=button value="Manual" style="font-size: 10;" onclick="iptman()">
</td>
</tr></table>



<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td align=center class=dark width=20%>Time Matching</td>
<td align=center><font class=Smaller1>
From <select name=FromHH style="font-size: 8pt;"><script>writeSelect(0,23)</script></select>&nbsp;:&nbsp;<select name=FromMM style="font-size: 8pt;"><script>writeSelect(0,59)</script></select> to <select name=ToHH style="font-size: 8pt;"><script>writeSelect(0,23)</script></select>&nbsp;:&nbsp;<select name=ToMM style="font-size: 8pt;"><script>writeSelect(0,59)</script></select>
</font>
</td>
<td align=center><font class=Smaller1>
<input type=checkbox name=Mon value=checked <xvar Mon>>Mon&nbsp;&nbsp;
<input type=checkbox name=Tue value=checked <xvar Tue>>Tue&nbsp;&nbsp;
<input type=checkbox name=Wed value=checked <xvar Wed>>Wed&nbsp;&nbsp;
<input type=checkbox name=Thu value=checked <xvar Thu>>Thu&nbsp;&nbsp;
<input type=checkbox name=Fri value=checked <xvar Fri>>Fri&nbsp;&nbsp;
<input type=checkbox name=Sat value=checked <xvar Sat>>Sat&nbsp;&nbsp;
<input type=checkbox name=Sun value=checked <xvar Sun>>Sun
</font>
</td>
</tr></table>
<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0" cellpadding=4><tr>
<td align=center class=dark width=20% ><font class=Bigger2>Layer 7</font><br><font class=Bigger1>Filters</font></td>
<td align=center>

<table width=100% nowrap cellpadding=0 cellspacing=0><tr>
<td>
&nbsp;<font  color=#0000F0><b>Protocol Description</b></font>&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=NotL7 value=checked <xvar NotL7>><font class=Smaller1>Not</font>
</td><td align=right nowrap>
<input type=button value="L7 Manager" style="font-size: 10;" onclick="l7manage()">
</td>
</tr></table>
<table width=100% cellpadding=0 cellspacing=0><tr><td>
<select name=L7Protocol style="width: 100%">
<option value=""></option>
<xvar +l7listprotocols (Group)>
</select>
</td></tr></table>
</td>
</tr></table>



<table width=100% border=1 cellpadding=3 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td align=center class=dark width=20%>DiffServ</td>
<td align=left><font>
&nbsp;&nbsp;DSCP&nbsp;&nbsp;
<select name=DSCP>
<option value="">
<option value="0">0 BE CS0
<option value="1">1
<option value="2">2
<option value="3">3
<option value="4">4
<option value="5">5
<option value="6">6
<option value="7">7
<option value="8">8 CS1
<option value="9">9
<option value="10">10 AF11
<option value="11">11
<option value="12">12 AF12
<option value="13">13
<option value="14">14 AF14
<option value="15">15
<option value="16">16 CS2
<option value="17">17
<option value="18">18 AF21
<option value="19">19
<option value="20">20 AF22
<option value="21">21
<option value="22">22 AF23
<option value="23">23 
<option value="24">24 CS3
<option value="25">25
<option value="26">26 AF31
<option value="27">27
<option value="28">28 AF32
<option value="29">29
<option value="30">30 AF33
<option value="31">31
<option value="32">32 CS4
<option value="33">33
<option value="34">34
<option value="35">35
<option value="36">36
<option value="37">37
<option value="38">38
<option value="39">39
<option value="40">40 CS5
<option value="41">41
<option value="42">42
<option value="43">43
<option value="44">44
<option value="45">45
<option value="46">46 EF
<option value="47">47
<option value="48">48 CS6
<option value="49">49
<option value="50">50
<option value="51">51
<option value="52">52
<option value="53">53
<option value="54">54
<option value="55">55
<option value="56">56 CS7
<option value="57">57
<option value="58">58
<option value="59">59
<option value="60">60
<option value="61">61
<option value="62">62
<option value="63">63
</select>
</td>
</tr></table>


<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0" cellpadding=3><tr>
<td align=center class=dark width=20%>Connection Limits</td>
<td><font>
&nbsp;&nbsp;Parallel connections per IP&nbsp;&nbsp;<select style="font-size: 8pt;" name=ParallelThan><option value=more>more</option><option value=less>less</option></select>&nbsp;&nbsp;than&nbsp;&nbsp;<input type=text name=Parallel maxlength=10 size=6 style="font-size: 8pt;" value="<xvar Parallel>">
</font>
</td>
<td><font>
&nbsp;&nbsp;Traffic per connection&nbsp;&nbsp;<select style="font-size: 8pt;" name=TrafficThan><option value=more>more</option><option value=less>less</option></select>&nbsp;&nbsp;than&nbsp;&nbsp;<input type=text name=Traffic maxlength=9 size=4 style="font-size: 8pt;" value="<xvar Traffic>"><select style="font-size: 8pt;" name=TrafficUnit><option value=MB>MB</option><option value=KB>KB</option></select>
</font>
</td>


</tr></table>


<br>
<table width=100% border=1 style="border-collapse: collapse" bordercolor="#C0C0C0"><tr>
<td width=20% id=ActionTD align=center></b></td>
<td align=center width=1% nowrap>
<select name=Target onchange="ActionChanged()">
<xvar +fw_listaction (Chain)>
</select>
</td>
<td align=right id=ActionParamTD nowrap><hr></td>
<td align=right width=1% nowrap><font class=Smaller1>
<input type=checkbox Name=LogEnabled value=checked onclick="ValidateLog()" <xvar LogEnabled>>LOG&nbsp;&nbsp;<input type=text name=LogLimit value="<xvar LogLimit>" onchange="ValidateLogLimit(this)" size=4 maxlength=4> / 
<select name=LogLimitSuffix>
<option value=second>Second</option>
<option value=minute>Minute</option>
<option value=hour>Hour</option>
<option value=day>Day</option>
</select>
</font>
&nbsp;&nbsp;&nbsp;Burst <input type=text name=LogBurst value="<xvar LogBurst>" onchange="ValidateLogBurst(this)"size=4 maxlength=4>&nbsp;
</td>
</tr></table>
<br>
<font color="#FF0000" class=Smaller1><xvar _errormsg></font>
<table width=100%>
<tr><td width=1%><font class=Smaller1>NOTES:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td align=center><font class=Smaller1>(*)</td><td><font class=Smaller1> The IP addresses can be single IP (ex. 192.168.0.15), network address (ex. 192.168.0.0/255.255.255.0 or 192.168.0.0/24)<br>and IP range (ex. 192.168.0.19-192.168.0.73)</td></tr>
<tr><td></td><td align=center><font class=Smaller1>(**)</td><td><font class=Smaller1>TCP and UDP ports can be single port (ex. 88) and port range (ex. 1903:1973)</td></tr>
</table>
</form>
</body>
</html>
