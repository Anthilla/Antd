#!/bin/bash
. /etc/kerbynet.conf
. $SCRIPTS/wifi.inc
function restarting {
  echo "WARNING: if you continue with this operation the WiFi subsystem will"
  echo "be stopped and restarted."
  echo "All WiFi connections will be terminated."
  echo
  echo -n "Are you sure you want to continue (y/n)?"
  read -n 1 CONFIRM
  echo
  if [ "`echo $CONFIRM | awk '{print toupper($0)}'`" != Y ] ; then
    echo "Operation Aborted."
    return 1
  fi
  echo
  wifi-destroy-all 
  #rmmod $DRIVER
  start-wifi
}
function setchannel {
  echo -e "Please be careful not to violate local law by setting incorrect values\nto the following parameters."
  echo
  echo "Actual Country Regulatory Domain: `$SCRIPTS/wifi-get-regdomain short` (`$SCRIPTS/wifi-get-regdomain long`)"
  echo
  XREG=`cat $REGISTER/system/net/WiFi/REG 2>/dev/null`
  if [ -z "$XREG" ] ; then
    XREG=`$SCRIPTS/wifi-get-regdomain short`
  fi
  READVALUE="L"
  while [ "$READVALUE" = L ] ; do
    readvalue "Wi-Fi Regulatory Domain (L=List 00=WORLD)" "$XREG" "L 00 `$SCRIPTS/wifi-list-regdomain`" "up" "" RejectNull
    echo
    if [ "$READVALUE" = L ] ; then
      for I in `$SCRIPTS/wifi-list-regdomain` ; do
	 echo -n "$I=`$SCRIPTS/countrycode2description $I`  " 
      done 
      echo
      echo
    fi
  done
  XREG=$READVALUE
  echo $XREG > $REGISTER/system/net/WiFi/REG
  setregdomain
  $SCRIPTS/wifi-get-regdomain
  if [ "$SCRIPTS/wifi-get-regdomain short"! = "$XREG" ] ; then
    echo
    echo "WARNING: Regulatory Domain incorrect!!!"
    echo
  fi
  WL=`wifi-list`
  echo
  for WDEV in $WL ; do
    echo -n "$WDEV - "
    $SCRIPTS/getintdesc $WDEV | sed -r 's/(.*)Atheros Communications, Inc.(.*)/Chipset\1\2/'
  done
  echo
  readvalue "WiFi device you want to configure the Standard/Channel/Power" "$DEV_SELECTED" "$WL" "lo" "" RejectNull
  XDEV=$READVALUE
  echo
  echo
  MODES="0 2 3"
  echo "   <0> Auto"
  [ "`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/11a 2>/dev/null`" = yes ] && echo "   <1> 802.11a (  5GHz 54Mbit/s)" && MODES="$MODES 1"
  echo "   <2> 802.11b (2.4GHz 11Mbit/s)"
  echo "   <3> 802.11g (2.4GHz 54Mbit/s)"
  [ "`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/11n 2>/dev/null`" = yes ] && echo "   <4> 802.11n (2.4GHz)" && MODES="$MODES 4"
  [ "`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/11a 2>/dev/null`" = yes -a "`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/11n 2>/dev/null`" = yes ]  && echo "   <5> 802.11n (  5GHz)" && MODES="$MODES 5"
  echo
  STANDARD="`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/Standard 2>/dev/null`"
  echo "$MODES" |grep -w -q "$STANDARD" || STANDARD=0
  [ -z "$STANDARD" ] && STANDARD=0
  readvalue "Standard" "$STANDARD" "$MODES" lo "" RejectNull
  STANDARD=$READVALUE
  echo $STANDARD > $REGISTER/system/net/WiFi/DEVS/$XDEV/Standard
  echo
  echo
  if [ "$STANDARD" == 0 ] ; then
    CHFILTER=""
  else
    if [ "$STANDARD" == 1 ] ; then
      CHFILTER=5.
    else
      CHFILTER=2.4
    fi
  fi
  iwlist $XDEV channel | grep -v available | grep " $CHFILTER"
  CHANNELS=`iwlist $XDEV channel | grep -v available | grep -v Current | grep Channel | grep " $CHFILTER" |awk '{ if (substr($2,1,1)=="0") print substr($2,2,1); if (substr($2,1,1)!="0") print $2;}'`
  CHCURRENT=`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/CHANNEL 2>/dev/null`
  echo $CHANNELS | grep -q -w "$CHCURRENT" || CHCURRENT=`echo $CHANNELS|awk '{print $1}'`
  [ -z "$CHCURRENT" ] && CHCURRENT=0
  echo
  readvalue "Channel" "$CHCURRENT" "$CHANNELS" "" "" RejectNull
  chCHANNEL=$READVALUE
  echo $chCHANNEL > $REGISTER/system/net/WiFi/DEVS/$XDEV/CHANNEL
  #DBMS=`getAllowedPower $XDEV`
  DBMS=$(seq 1 100)
  DBMCURRENT=`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/TXPOWER 2>/dev/null` 
  [ "$DBMCURRENT" == off ] && DBMCURRENT=0
  [ -z "$DBMCURRENT" ] && DBMCURRENT=auto

  echo $DBMS | grep -q -w "$DBMCURRENT" || DBMCURRENT=auto
  #MAXTXPOWER=`echo $DBMS |awk '{print $1}'`
  
  readvalue "Tx Power in dBm (auto=automatic selection)" "$DBMCURRENT" "auto $DBMS" "" "" RejectNull
  txPW=$READVALUE
  echo $txPW > $REGISTER/system/net/WiFi/DEVS/$XDEV/TXPOWER
  #if iwconfig $XDEV txpower $txPW ; then
  #  echo $txPW > $REGISTER/system/net/WiFi/DEVS/$XDEV/TXPOWER
  #else
  #  echo auto > $REGISTER/system/net/WiFi/DEVS/$XDEV/TXPOWER
  #fi
  #rmmod $DRIVER
  start-wifi
}
function list_adapter {
  for A in $ALIASES ; do
    DESCR="`cat $REGISTER/system/net/interfaces/$A/Description 2>/dev/null`"
    DESCR="`echo $DESCR | sed -r 's/(.*)Atheros Communications, Inc.(.*)/\1\2/'`"
    DESCR="${DESCR:0:70}"
    if [ "$A" == "$SELECTED" ] ; then
      echo ">$A :$DESCR"
    else
      echo " $A :$DESCR"
    fi
  done
}
function PressKey {
  echo
  echo -n "Press any key to continue."
  read -n1 -s
  echo
}
function change_mode {
   echo "  <1> Access Point"
   echo "  <2> Client Station"
   echo
   MODE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Mode 2>/dev/null`"
  [ "$MODE" == ap ] && MODE=1
  [ "$MODE" == sta ] && MODE=2
  readvalue "Mode" "$MODE" "1 2" num "ap sta"
  MODE=$READVALUE
  if [ "$MODE" == sta ] ; then
    cmDEV=`wifi-getname $SELECTED`
    STAs=`wifi-liststa $cmDEV`
    if [ -n "$STAs" -a "$SELECTED" != "$STAs" ] ; then
       echo
       echo "ERROR: only 1 interface can be in Station Mode on the device $cmDEV"
       echo
       MODE=ap
    fi
  fi
  echo $MODE > $REGISTER/system/net/interfaces/$SELECTED/WiFi/Mode
}
function change_ssid {
   echo
   change_mode
   MODE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Mode 2>/dev/null`"
   SSID="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/SSID 2>/dev/null`"
   HIDE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Hide 2>/dev/null`"
   WDS="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/WDS 2>/dev/null`"
   [ -z "$HIDE" ] && HIDE=0
   echo -n "SSID [$SSID]: "
   read XSSID
   [ "$XSSID" == "" ] && XSSID=$SSID
   if [ "$MODE" == ap ] ; then
     if [ "$HIDE" == 0 ] ; then
       XHIDE=no
     else
       XHIDE=yes
     fi
     echo -n "Hide SSID [$XHIDE]: "
     XOLD=$XHIDE
     read XHIDE
     [ -z "$XHIDE" ] && XHIDE="$XOLD"
     XHIDE="`echo $XHIDE | awk '{print tolower($0)}'`"
     if [ "$XHIDE" == yes -o "$XHIDE" == y ] ; then
       HIDE=1
     else 
       HIDE=0
     fi 
   fi
   if [ "$WDS" == yes ] ; then
     XWDS=yes
   else
     XWDS=no
   fi
   echo -n "Wireless Distribution System (WDS) [$XWDS]: "
   XOLD=$XWDS
   read XWDS
   [ -z "$XWDS" ] && XWDS="$XOLD"
   XWDS="`echo $XWDS | awk '{print tolower($0)}'`"
   if [ "$XWDS" == yes -o "$XWDS" == y ] ; then
     WDS=yes
   else 
     WDS="no"
   fi 
   echo $HIDE > $REGISTER/system/net/interfaces/$SELECTED/WiFi/Hide
   echo $XSSID > $REGISTER/system/net/interfaces/$SELECTED/WiFi/SSID
   echo $WDS > $REGISTER/system/net/interfaces/$SELECTED/WiFi/WDS
   echo
   change_encryption
   echo
   disassociate $SELECTED
# da fare eliminazione singolo ap
   #rmmod $DRIVER
   start-wifi
   
}
function change_encryption {
  ENCRYPTION="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Encryption 2>/dev/null`"
  MODE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Mode 2>/dev/null`"
  [ -z "$ENCRYPTION" ] && ENCRYPTION=plaintext
  [ "$ENCRYPTION" == plaintext ] && XENCRYPTION=1
  [ "$ENCRYPTION" == wpa-eap ] && XENCRYPTION=2
  [ "$ENCRYPTION" == wpa-psk ] && XENCRYPTION=3
  [ "$ENCRYPTION" == wep ] && XENCRYPTION=4
  echo "  <1> Plaintext (No encryption)"
  echo "  <2> WPA-Enterprise (RADIUS authentication)"
  echo "  <3> WPA-PSK (Pre-Shared Key)"
  echo "  <4> WEP"
  echo
  readvalue "Encryption" "$XENCRYPTION" "1 2 3 4" num "plaintext wpa-eap wpa-psk wep"
  ENCRYPTION=$READVALUE
  case $ENCRYPTION in
    plaintext)
      echo
      echo "WARNING: SSID `cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/SSID 2>/dev/null` is not authenticated and not encrypted."       
    ;;
    wpa-eap)
      MODE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Mode 2>/dev/null`"
      if [ "$MODE" == ap ] ; then
        RADIUSTYPE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/RadiusType 2>/dev/null`"
        [ -z "$RADIUSTYPE" ] && RADIUSTYPE=Local
        [ "$RADIUSTYPE" == Local ] && XRADIUSTYPE=1
        [ "$RADIUSTYPE" == External ] && XRADIUSTYPE=2
        echo
        echo "  <1> Local RADIUS server"
        echo "  <2> External RADIUS server"
        echo
        readvalue "RADIUS type" "$XRADIUSTYPE" "1 2" num "Local External"
        RADIUSTYPE=$READVALUE
        if [ "$RADIUSTYPE" == External ] ; then
          RADIUS="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Radius 2>/dev/null`"
          SECRET="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/Secret 2>/dev/null`"
          readvalue "IP address of the RADIUS server" "$RADIUS" "" "" "" RejectNull
          RADIUS="$READVALUE"
          readvalue "Shared secret" "$SECRET" "" "" "" RejectNull
          SECRET="$READVALUE"
          echo "$RADIUS" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/Radius
          echo "$SECRET" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/Secret
        else
          if  ! ps -e |grep -q -w 'radiusd$' ; then
            echo
            echo "WARNING: the local RADIUS server has not started."
          fi
        fi
        echo "$RADIUSTYPE" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/RadiusType
      else
         EAPTYPE="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAPType 2>/dev/null`"
         [ -z "$EAPTYPE" ] && EAPTYPE=TTLS
         [ "$EAPTYPE" == TTLS ] && XEAPTYPE=1
         [ "$EAPTYPE" == PEAP ] && XEAPTYPE=2
         echo
         echo "  <1> EAP-TTLS with PAP"
         echo "  <2> PEAP with MsCHAPv2"
         echo
         readvalue "EAP type" "$XEAPTYPE" "1 2" num "TTLS PEAP"
         EAPTYPE=$READVALUE
         echo "$EAPTYPE" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAPType
         EAPUSER="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAP-User 2>/dev/null`"
         EAPPASSWORD="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAP-Password 2>/dev/null`"
         [ -z "$EAPUSER" ] && EAPUSER="admin@example.com"
         [ -z "$EAPPASSWORD" ] && EAPPASSWORD="zeroshell"
         echo
         if [ "$EAPTYPE" == TTLS ] ; then
           echo "RADIUS Credentials for PAP authentication"
         else
           echo "RADIUS Credentials for MsCHAPv2 authentication"
         fi
         readvalue "Username" "$EAPUSER" "" "" "" RejectNull
         EAPUSER="$READVALUE"
         readvalue "Password" "$EAPPASSWORD" "" "" "" RejectNull
         EAPPASSWORD="$READVALUE"
         echo "$EAPUSER" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAP-User
         echo "$EAPPASSWORD" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/EAP-Password
      fi
    ;;
    wpa-psk)
      PSK="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/PSK 2>/dev/null`"
      [ -z "$PSK" ] && PSK="Zeroshell Net Services"
      REREAD=true
      while [ "$REREAD" == true ] ; do
        readvalue "Pre-Shared Key" "$PSK" "" "" "" RejectNull 8 64
        LN=`echo -n "$READVALUE" | wc -c`
        if [ $LN -eq 64 ] ; then
          if echo "$READVALUE" | egrep -q '^[0-9a-fA-F]*$' ; then
            REREAD=false
          fi
        else
          REREAD=false
        fi
      done
      PSK="$READVALUE"
      echo "$PSK" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/PSK   
    ;;
    wep)
      WEPKEY="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/WEPKEY 2>/dev/null`"
      [ -z "$WEPKEY" ] && WEPKEY="Zeroshell Net"
      REREAD=true
      while [ "$REREAD" == true ] ; do
        readvalue "WEP Key" "$WEPKEY" "" "" "" RejectNull
        LN=`echo -n "$READVALUE" | wc -c`
        if [ $LN -eq 5 -o $LN -eq 13 ] ; then
           REREAD=false
        fi
        if [ $LN -eq 10 -o $LN -eq 26 ] ; then
          if echo "$READVALUE" | egrep -q '^[0-9a-fA-F]*$' ; then
            REREAD=false
          fi
        fi
      done
      WEPKEY="$READVALUE"
      WEPIDX="`cat $REGISTER/system/net/interfaces/$SELECTED/WiFi/WEPIDX 2>/dev/null`"
      [ -z "$WEPIDX" ] && WEPIDX=0
      WEPIDX=$((WEPIDX+1))
      readvalue "Key index" "$WEPIDX" "1 2 3 4" "" "" RejectNull 
      WEPIDX=$((READVALUE-1))
      echo -n "$WEPKEY" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/WEPKEY
      echo -n "$WEPIDX" > $REGISTER/system/net/interfaces/$SELECTED/WiFi/WEPIDX
    ;;
    
  esac
  echo $ENCRYPTION >$REGISTER/system/net/interfaces/$SELECTED/WiFi/Encryption   
}
function add_multissid {
   WL=`wifi-list`
   for WDEV in $WL ; do
     echo -n "$WDEV - "
     $SCRIPTS/getintdesc $WDEV | sed -r 's/(.*)Atheros Communications, Inc.(.*)/Chipset\1\2/'
   done
   echo
   readvalue "WiFi device on which you want to add a new SSID" "$DEV_SELECTED" "$WL" "lo" "" RejectNull
   XDEV=$READVALUE
   
   if [ `wifi-listvaps $XDEV | wc -l` -lt $MADWIFI_MAXVAPS ] ; then
     SSIDMAC=`wifi-create-interface $XDEV managed 2>/dev/null` #eth80 ap bssid 2>/dev/null ; then
     if [ -z "$SSIDMAC" ] ; then
       echo
       echo "ERROR: it is not possible to create another SSID on $XDEV:"
       echo "       - The max number of virtual AP is $MADWIFI_MAXVAPS."
       echo "       - Only one SSID can be set in Station mode and must be"
       echo "         created after the creation of the virtual APs."        
       echo
       sleep 5
       echo -n "Please wait: the WiFi subsystem needs to be restarted ... "
       start-wifi >/dev/null
       echo
       return 2
     fi
     $SCRIPTS/mrtg_reload
   else
     echo
     echo "ERROR: no resources available to create another SSID on the device $XDEV."
     return 1
   fi
  echo  "Creating interface for the new SSID ... "
#   SSIDMAC=`sed 's/://g' < /sys/class/net/eth80/address 2>/dev/null | awk '{print toupper($0)}'`
   if [ -n "$SSIDMAC" ] ; then
     VAP=`wifi-mac2vap $SSIDMAC`
     if ! [ -d "$REGISTER/system/net/interfaces/$VAP/WiFi" ] ; then
       mkdir -p $REGISTER/system/net/interfaces/$VAP/WiFi
       echo ap > $REGISTER/system/net/interfaces/$VAP/WiFi/Mode
       XMULTISSID=SSID-$SSIDMAC
       echo "$XMULTISSID" > $REGISTER/system/net/interfaces/$VAP/WiFi/SSID
       echo plaintext >$REGISTER/system/net/interfaces/$VAP/WiFi/Encryption   
     fi
     DEVID=`cat $REGISTER/system/net/WiFi/DEVS/$XDEV/ID`
     echo $DEVID > $REGISTER/system/net/interfaces/$VAP/WiFi/DevID
     DEV_SELECTED=$XDEV
     SELECTED=$VAP
     echo
     change_ssid
   else
     echo 
     echo "ERROR: Multi-SSID creation has failed."
     return 1
   fi
}
function delete_multissid {
  ALIASES=`wifi-listvaps`
  if [ -z "$ALIASES" ] ; then
    echo "There is no SSID to delete."
    return 1
  fi
  showconfig
  echo
  readvalue "WiFi interface to delete" "$SELECTED" "$ALIASES" "up" "" RejectNull
  VAP=$READVALUE
  SSID="`cat $REGISTER/system/net/interfaces/$VAP/WiFi/SSID 2>/dev/null`"
  readvalue "Are you sure you want do delete the SSID '$SSID'" "no" "YES Y NO N" "up" "" RejectNull
  CONFIRM="$READVALUE"
  if [ "$CONFIRM" == YES -o "$CONFIRM" == Y ] ; then
    wifi-destroy-interface $VAP
    $SCRIPTS/removeeth $VAP
    #rmmod $DRIVER
    start-wifi
  fi
  if [ "$VAP" == "$SELECTED" ] ; then
    ALIASES=`wifi-listvaps`
    SELECTED=`echo "$ALIASES" | awk '{print $1}' | head -1`
    TDEV_SELECTED=$DEV_SELECTED
    DEV_SELECTED=`wifi-getname $SELECTED`
    [ -z "$DEV_SELECTED" ] && DEV_SELECTED=$TDEV_SELECTED 
  fi
}
#if ! [ -d $REGISTER/system/net/WiFi/DEVS/wlan0 ] ; then
#  driver-unload
#fi
#if ! ls /sys/class/net/wlan? 2>/dev/null >/dev/null ; then
#  driver-load || exit 1
#  wifi-create-vaps
#fi
WL=`wifi-list`
ALIASES=""
for I in $WL ; do
  ALIASES="$ALIASES `wifi-getaliasname $I`"
done
SELECTED=`echo $ALIASES | awk '{print $1}' |head -1`
#DEV_SELECTED=`echo $WL | awk '{print $1}' |head -1`
while true ; do
   [ -z "$DEV_SELECTED" ] && DEV_SELECTED=`wifi-list | awk '{print $1}' | head -1` 
   showconfig
   echo
   echo "COMMANDS"
   echo "  <N> New SSID                         <M> Modify SSID"
   echo "  <D> Delete SSID                      <I> Show Information"
   echo "  <C> Reg-Domain/Std/Channel/Tx-Power"
   echo "  <L> List Stations                    <S> Channel Scanning"
   echo "  <R> Restarting Devices               <Q> Quit"
   echo ; echo -n ">> "
   read -n1  X
   X=`echo $X | awk '{print toupper($0)}'`
   echo
   echo
   case "$X" in
     I)
       ALIASES=`wifi-listvaps`
       if [ -z "$ALIASES" ] ; then
         echo "There is no SSID defined."
       else
         echo
         readvalue "WiFi interface" "$SELECTED" "$ALIASES" "up" "" RejectNull
         SELECTED=$READVALUE
         DEV_SELECTED=`wifi-getname $SELECTED`
         #echo
         #iwconfig $SELECTED
         $SCRIPTS/iwconfig_watch $SELECTED
       fi
     ;;
     M)
       ALIASES=`wifi-listvaps`
       if [ -z "$ALIASES" ] ; then
         echo "There is no SSID to modify."
       else
         readvalue "WiFi interface to modify" "$SELECTED" "$ALIASES" "up" "" RejectNull
         VAP=$READVALUE
         SELECTED=$VAP
         DEV_SELECTED=`wifi-getname $SELECTED`
         #change_ssid && set-wifi $SELECTED restart
         change_ssid
       fi
     ;;
     N)
       #add_multissid && set-wifi $SELECTED restart
       add_multissid
     ;;
     D)
       ALIASES=`wifi-listvaps`
       if [ -z "$ALIASES" ] ; then
         echo "There is no SSID to delete."
       else
         delete_multissid
       fi
     ;;
     C)
       setchannel 
     ;;
     L)
       ALIASES=`wifi-listvaps`
       if [ -z "$ALIASES" ] ; then
         echo "There is no SSID defined."
       else
         echo
         readvalue "WiFi interface" "$SELECTED" "$ALIASES" "up" "" RejectNull
         SELECTED=$READVALUE
         DEV_SELECTED=`wifi-getname $SELECTED`
         echo
         wifi-list-station $SELECTED |more 
         PressKey
       fi
     ;;
     S)
       WL=`wifi-list`
       echo "WL="$WL
       for WDEV in $WL ; do
         echo -n "$WDEV - "
         $SCRIPTS/getintdesc $WDEV | sed -r 's/(.*)Atheros Communications, Inc.(.*)/Chipset\1\2/'
       done
       echo
       readvalue "WiFi device to use for scanning" "$DEV_SELECTED" "$WL" "lo" "" RejectNull
       CSDEV=$READVALUE
       wifi-scanning $CSDEV |more 
       PressKey
     ;;
     R)
       restarting
     ;;
     Q)
       exit 
     ;;

   esac
done

