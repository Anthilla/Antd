#!/bin/bash
. /etc/kerbynet.conf
. $SCRIPTS/net.inc
. $SCRIPTS/readvalue
function getLastSec {
  D="$1"
  P="$2"
  if [ -n "$P" ] ; then
    parted -m $D unit s print  |grep ^${P}: |awk -F: '{print $3}' |awk -Fs '{print $1}'
  else
    blockdev --getsz $D
  fi

}
function DefaultNetmask {
  FIRST=`echo $1 | awk -F. '{print $1}'`
  if [ "$FIRST" -lt 128 ] ; then
     echo 255.0.0.0
  else
    if [ "$FIRST" -lt 192 ] ; then
       echo 255.255.0.0
    else
       echo 255.255.255.0
    fi
  fi
}
INFO=/tmp/disk_info_$$
ERROR=/tmp/disk_error_$$
ERR=no
INSTFILES=/usr/share/instfiles

export RELEASE="`$SCRIPTS/release`.`$SCRIPTS/patchlevel`"
export DESC="Zeroshell $RELEASE"
export KERNEL="`( cd /cdrom/modules/ && ls )`"
export SLOT=1
export PARAMETERS=quiet
export CONSOLE=""
export QUERY_STRING="onlyrender"
echo
echo "----------------------------------------------------------------------------"
echo "  I N S T A L L A T I O N    M A N A G E R"
echo "----------------------------------------------------------------------------"
echo
echo "You can install Zeroshell on the following devices:"
echo
echo " - SATA Disks"
echo " - IDE Disks"
echo " - SCSI Disks"
echo " - Compact Flash and SD Card"
echo " - USB Flash/Disks (USB 3.0 is supported)"
cat <<EOF

You should always prefer the Installed Version instead of the Live CD one.
In fact, the former is faster and more reliable than the version on CD.
In addition, the Installed Version allows the automatic upgrade to the next
release and eventually even the downgrade to the previous one with no effort.
EOF
while true; do
echo
echo -e "Please wait: scanning storage devices ...\n"
DEVICES=`awk ' BEGIN { DISK="----";getline;getline} ;substr($4,0,length(DISK)) != DISK  {DISK=$4 ; print "/dev/" $4}' < /proc/partitions |egrep -v ^/dev/loop |grep -v ^/dev/ram |grep -v ^/dev/sr`
N=0
for DEV in $DEVICES ; do
  if [ ${DEV:0:7} != /dev/fd ] ; then
    SIZE="$(blockdev --getsize64 $DEV)"
    NOTE=""    
    if [ -n "$SIZE" ] ; then
        N=$((N+1))
        [ $SIZE -lt 1000000000 ] && NOTE="(TOO SMALL)"
        GIGA=$(echo $SIZE | awk '{printf ("%.2f",$1/1000000000)}')
         
        if sg_inq $DEV 2>/dev/null >/dev/null; then
           sg_inq $DEV 2>/dev/null >$INFO
           MODEL="`grep 'Vendor identification:' $INFO |cut -f2 -d:` `grep 'Product identification:' $INFO |cut -f2 -d:`"
        else
           hdparm -I $DEV 2>/dev/null >$INFO
           MODEL="`grep 'Model Number:' $INFO |cut -f2 -d:`"
        fi
        DISK[$N]=$DEV
        echo "<$N>  $MODEL (Size: $GIGA GB) $NOTE" 
    fi
  fi
done
echo
K=1000
until [ $K -ge 0 -a $K -le $N ] ; do 
  echo -n "Select the device where to install Zeroshell (1-$N) (0=Exit): "
  read  K
  [ $K -lt 1000 ] 2>/dev/null  || K=1000  
done
[ $K -eq 0 ] && echo ABORTED && break 

DEV=${DISK[$K]}
echo 
if grep -q $DEV /etc/slots/current/IsoDev 2>/dev/null ; then
  echo "ERROR: the installation cannot take place on the current"
  echo "       Boot Disk"
  continue
fi
if df | grep ^$DEV | grep -q -w /DB 2>/dev/null ; then
  echo "ERROR: the installation cannot take place on the disk"
  echo "       where the active profile is located"
  continue
fi
if df | grep -q ^$DEV  2>/dev/null ; then
  echo "ERROR: the installation cannot take place because"
  echo "       there is a mounted partition on the disk"
  continue
fi
if sg_inq $DEV 2>/dev/null >/dev/null; then
  sg_inq $DEV 2>/dev/null > $INFO
  MODEL="`grep 'Vendor identification:' $INFO |cut -f2 -d:` `grep 'Product identification:' $INFO |cut -f2 -d:`"
else
  hdparm -I $DEV 2>/dev/null >$INFO
  MODEL="`grep 'Model Number:' $INFO |cut -f2 -d:`"
fi
GIGA="$(blockdev --getsize64 $DEV | awk '{printf ("%.2f",$1/1000000000)}')"
echo '---------------------------------------------------------------------'
echo "DEVICE :  $DEV"
echo "Model  : $MODEL"
echo "Size   :  $GIGA GB"
echo '---------------------------------------------------------------------'
echo
echo "CURRENT DISK PARTITIONING"
parted $DEV print -s 
echo
echo "WARNING: ALL DATA ON THE SELECT DISK WILL BE DESTROYED"
K=""
until [ "$K" = yes  -o "$K" = no ] ; do 
  echo -n "Are you sure you want to continue (yes or no)? "
  read  K
done
[ "$K" = no ] && echo ABORTED && break 
echo
xCONSOLE=VGA
readvalue "Bootstrap Console (VGA or SERIAL)" "$xCONSOLE" "VGA SERIAL" up ""  RejectNull
xCONSOLE="$READVALUE"
if [ "$xCONSOLE" = SERIAL ] ; then
  xSPEED=38400
  echo
  readvalue "Serial Speed (9600 19200 38400 57600 115200)" "$xSPEED" "9600 19200 38400 57600 115200" up ""  RejectNull
  xSPEED="$READVALUE"
  xCONSOLE=$xSPEED
  export CONSOLE=console="ttyS0,${xSPEED}n8"
fi
echo

xPARAM=$PARAMETERS
readvalue "Kernel Parameters (NULL=no parameters)" "$xPARAM" "" "" ""  
xPARAM="$READVALUE"
if [ "`echo $xPARAM | awk '{print toupper($0)}'`" = "NULL" ] ; then
  xPARAM=""
fi
export PARAMETERS="$xPARAM"
echo
echo "Installing Zeroshell $RELEASE on $MODEL ($DEV) ..."
PX=""
if echo "$DEV" | grep -q "[0123456789]$" ; then
  PX=p
fi
echo -n "Writing MBR ... "
dd if=$INSTFILES/MBR of=$DEV >/dev/null 2>$ERROR
if [ "$?" = 0 ] ; then
  parted $DEV rm 4 2>/dev/null
  parted $DEV rm 3 2>/dev/null
  parted $DEV rm 2 2>/dev/null
  FIRSTSEC=$(getLastSec $DEV 1)
  LASTSEC=$((FIRSTSEC+655360))
  FIRSTSEC=$((FIRSTSEC+1))
  parted -a optimal $DEV unit s mkpart primary $FIRSTSEC $LASTSEC 2>/dev/null 
  FIRSTSEC=$(getLastSec $DEV 2)
  LASTSEC=$((FIRSTSEC+655360))
  FIRSTSEC=$((FIRSTSEC+1))
  parted -a optimal $DEV unit s mkpart primary $FIRSTSEC $LASTSEC 2>/dev/null
  FIRSTSEC=$(getLastSec $DEV 3)
  LASTSEC=$(getLastSec $DEV)
  FIRSTSEC=$((FIRSTSEC+1))
  LASTSEC=$((LASTSEC-1))
  parted -a optimal $DEV unit s mkpart primary $FIRSTSEC $LASTSEC 2>/dev/null
  parted $DEV toggle 1 boot 2>/dev/null
  partprobe
  echo Done
else
  ERR=yes
  break
fi
echo -n "Preparing Boot partition ... "
mkfs -t ext3 ${DEV}${PX}1 >/dev/null 2>$ERROR
export LABEL="ZS-`rand |tr [a-z] [A-Z]`"
e2label ${DEV}${PX}1 $LABEL
if [ "$?" = 0 ] ; then
  echo Done
else
  ERR=yes
  break
fi
echo -n "Mounting Boot partition ... "
mount ${DEV}${PX}1 /mpoint 2>$ERROR
if [ "$?" = 0 ] ; then
  echo Done
else
  ERR=yes
  break
fi
echo -n "Installing Boot Loader ... "
tar -C /mpoint -xjf $INSTFILES/boot.tar.bz2 2>$ERROR >/dev/null
if [ "$?" = 0 ] ; then
  : 
else
  ERR=yes
  break
fi
echo "$xCONSOLE" > /mpoint/conf/Console
$SCRIPTS/change_c_year /mpoint/grub/
cat << EOF > /mpoint/grub/grub.cfg
set default=0
set timeout=3
search  --set root --label $LABEL
EOF
if [ "$xCONSOLE" = VGA ] ; then
  export CAT="cat /grub/zeroshell.txt"
else
  export CAT=""
fi
render $TEMPLATE/grub_menuentry >> /mpoint/grub/grub.cfg
mkdir /mpoint/1/$KERNEL
cp /cdrom/isolinux/initrd.img /cdrom/isolinux/vmlinuz /mpoint/1/$KERNEL
echo "Zeroshell $RELEASE" > /mpoint/1/conf/Description
echo "$RELEASE" > /mpoint/1/conf/Release
echo "$KERNEL" > /mpoint/1/conf/Kernel
echo "$PARAMETERS" > /mpoint/1/conf/Parameters
umount /mpoint
echo Done
BLOCKS="`df |grep /cdrom$ |awk '{print $2}'`"
if [ -f "/etc/slots/current/IsoDev" ] ; then
  SOURCE="`cat /etc/slots/current/IsoDev`"
else
  SOURCE="`df |grep /cdrom$ |awk '{print $1}'`"
  BLOCKS=$((BLOCKS-2))
fi
echo -n "Writing Image ($BLOCKS KB) on Slot 1 ... "
dd if=$SOURCE of=${DEV}${PX}2 bs=1024 count=$BLOCKS >/dev/null 2>$ERROR
if [ "$?" = 0 ] ; then
  echo Done
else
  ERR=yes
  break
fi
dd if=${DEV}${PX}2 of=${DEV}${PX}3 bs=1M count=1 >/dev/null 2>/dev/null
echo -n "Preparing Profile Partition ... "
mkfs -t ext4 ${DEV}${PX}4 >/dev/null 2>$ERROR
if [ "$?" = 0 ] ; then
  e2label ${DEV}${PX}4 PROFILES
  echo Done
else
  ERR=yes
  break
fi
readvalue "Do you want to create a configuration profile?" "yes" "YES Y NO N" "lo" "" RejectNull
if [ "$READVALUE" != yes -a "$READVALUE" != y ] ; then
  break
fi

$SCRIPTS/create-profile ${DEV}${PX}4 2>$ERROR
if [ "$?" = 0 ] ; then
  echo Done
else
  ERR=yes
  break
fi
mount ${DEV}${PX}4 /mpoint 2>$ERROR
if [ "$?" = 0 ] ; then
  echo -n "Activating the Profile ($(cat /mpoint/_DB.001/.settings/Description)) ... "
  touch /mpoint/_DB.001/.settings/Active && touch /mpoint/_DB.001/.settings/LastActivation
  umount /mpoint
  echo Done
else
  ERR=yes
  break
fi




break
done
if [ "$ERR" = yes ] ; then 
  echo
  echo "ERROR:"
  cat "$ERROR"
fi
rm -f  $INFO $ERROR
echo
echo "Installation process terminated"
