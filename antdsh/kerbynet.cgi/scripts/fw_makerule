#!/bin/sh
. /etc/kerbynet.conf
CHAIN="$1"
RULE="$2"
OPT="$3"
[ -z "$CHAIN" -a -z "$RULE" ] && exit 1
CONFIG="$REGISTER/system/net/FW"
if [ "$CHAIN" = QoS ] ; then
  TABLE="-t mangle"
  CH=QoS
else
  if [ "$CHAIN" = NetBalancer ] ; then
    TABLE="-t mangle"
    CH=NetBalancer
  else
    TABLE=""
    CH="$CHAIN"
  fi
fi
[ "$OPT" == test ] && CONFIG="$CONFIG/tmp"
if ! [ -d "$CONFIG/Chains/$CHAIN/Rules/$RULE" ] ; then
  echo "Rule does not exist" >&2
  exit 2
fi
cd "$CONFIG/Chains/$CHAIN/Rules/$RULE"
ENABLED="`cat Enabled 2>/dev/null`"
if [ "$ENABLED" == yes -o "$OPT" == test ] ; then
  IPT="-A $CH"
  ForwardType="`cat ForwardType 2>/dev/null`"
  if ! [ -z "$ForwardType" -o "$CH" != FORWARD ] ; then
    if ! echo $IPT | grep -q mphysdev ; then
      MPHYSDEV="-mphysdev"
    else
      MPHYSDEV=""
    fi
    if [ "$ForwardType" == Bridged ] ; then
      NOT=""
    else
      NOT="!"
    fi
    IPT="$IPT $MPHYSDEV $NOT --physdev-is-bridged"
  fi
  Input="`cat Input 2>/dev/null`"
  if ! [ -z "$Input" ] ; then
    NOT="" ; [ "`cat NotInput 2>/dev/null`" == checked ] && NOT='!'
    if ! [ -r "$REGISTER/system/net/interfaces/$Input/Bridge/Name" ] ; then
      IPT="$IPT $NOT -i $Input"
    else
      if ! echo $IPT | grep -q mphysdev ; then
        MPHYSDEV="-mphysdev"
      else
        MPHYSDEV=""
      fi
      IPT="$IPT $MPHYSDEV $NOT --physdev-in $Input"
    fi
  fi
  Output="`cat Output 2>/dev/null`"
  if ! [ -z "$Output" ] ; then
    NOT="" ; [ "`cat NotOutput 2>/dev/null`" == checked ] && NOT='!'
    if ! [ -r "$REGISTER/system/net/interfaces/$Output/Bridge/Name" ] ; then
      IPT="$IPT $NOT -o $Output"
    else
      if ! echo $IPT | grep -q mphysdev ; then
        MPHYSDEV="-mphysdev"
      else
        MPHYSDEV=""
      fi
      IPT="$IPT $MPHYSDEV $NOT --physdev-out $Output"
    fi
  fi
  SourceIP="`cat SourceIP 2>/dev/null`"
  if ! [ -z "$SourceIP" ] ; then
    NOT="" ; [ "`cat NotSourceIP 2>/dev/null`" == checked ] && NOT='!'
    if echo $SourceIP | grep -q '-' ; then
      IPT="$IPT -miprange $NOT --src-range $SourceIP"
    else
      IPT="$IPT $NOT -s $SourceIP"
    fi
  fi
  DestinationIP="`cat DestinationIP 2>/dev/null`"
  if ! [ -z "$DestinationIP" ] ; then
    NOT="" ; [ "`cat NotDestinationIP 2>/dev/null`" == checked ] && NOT='!'
    if echo $DestinationIP | grep -q '-' ; then
      if ! echo $IPT | grep -q 'iprange' ; then
        IPRANGE='-miprange'
      fi
      IPT="$IPT $IPRANGE $NOT --dst-range $DestinationIP"
    else
      IPT="$IPT $NOT -d $DestinationIP"
    fi
  fi
  Fragments="`cat Fragments 2>/dev/null`"
  if [ "$Fragments" == checked ] ; then
    NOT="" ; [ "`cat NotFragments 2>/dev/null`" == checked ] && NOT='!'
    IPT="$IPT $NOT -f"
  fi
  SourceMAC="`cat SourceMAC 2>/dev/null`"
  if ! [ -z "$SourceMAC" ] ; then
    NOT="" ; [ "`cat NotSourceMAC 2>/dev/null`" == checked ] && NOT='!'
    IPT="$IPT -mmac $NOT --mac-source $SourceMAC"
  fi
  MinLen="`cat MinLen 2>/dev/null`"
  if ! [ -z "$MinLen" ] ; then
    MaxLen="`cat MaxLen 2>/dev/null`"
    NOT="" ; [ "`cat NotLen 2>/dev/null`" == checked ] && NOT='!'
    IPT="$IPT -mlength $NOT --length $MinLen:$MaxLen"
  fi
  if [ "`cat NEW 2>/dev/null`" == checked ] ; then
    STATE="$STATE,NEW"
  fi
  if [ "`cat ESTABLISHED 2>/dev/null`" == checked ] ; then
    STATE="$STATE,ESTABLISHED"
  fi
  if [ "`cat RELATED 2>/dev/null`" == checked ] ; then
    STATE="$STATE,RELATED"
  fi
  if [ "`cat INVALID 2>/dev/null`" == checked ] ; then
    STATE="$STATE,INVALID"
  fi
  if [ "`cat UNTRACKED 2>/dev/null`" == checked ] ; then
    STATE="$STATE,UNTRACKED"
  fi
  if [ "${STATE:0:1}" == ',' ] ; then
    STATE="${STATE:1}"
    NOT="" ; [ "`cat NotState 2>/dev/null`" == checked ] && NOT='!'
    IPT="$IPT -mstate $NOT --state $STATE"
  fi
  FromHH="`cat FromHH 2>/dev/null`"
  FromMM="`cat FromMM 2>/dev/null`"
  if ! [ -z "$FromHH" -o -z "$FromMM" ] ; then
    if ! echo $IPT | grep -q 'mtime' ; then
      MTIME='-mtime --kerneltz'
    else
      MTIME=''
    fi
    IPT="$IPT $MTIME --timestart $FromHH:$FromMM"
  fi
  ToHH="`cat ToHH 2>/dev/null`"
  ToMM="`cat ToMM 2>/dev/null`"
  if ! [ -z "$ToHH" -o -z "$ToMM" ] ; then
    if ! echo $IPT | grep -q 'mtime' ; then
      MTIME='-mtime --kerneltz'
    else
      MTIME=''
    fi
    IPT="$IPT $MTIME --timestop $ToHH:$ToMM"
  fi
  if [ "`cat Mon 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Mon"
  fi
  if [ "`cat Tue 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Tue"
  fi
  if [ "`cat Wed 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Wed"
  fi
  if [ "`cat Thu 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Thu"
  fi
  if [ "`cat Fri 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Fri"
  fi
  if [ "`cat Sat 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Sat"
  fi
  if [ "`cat Sun 2>/dev/null`" == checked ] ; then
    TIME="$TIME,Sun"
  fi
  if [ "${TIME:0:1}" == ',' ] ; then
    TIME="${TIME:1}"
    if ! echo $IPT | grep -q 'mtime' ; then
      MTIME='-mtime --kerneltz'
    else
      MTIME=''
    fi
    IPT="$IPT $MTIME --weekdays $TIME"
  fi
  NotP2P="`cat NotP2P 2>/dev/null`"
  EDK="`cat edk 2>/dev/null`"
  KAZAA="`cat kazaa 2>/dev/null`"
  GNU="`cat gnu 2>/dev/null`"
  BIT="`cat bit 2>/dev/null`"
  DC="`cat dc 2>/dev/null`"
  if ! [ "$EDK" != checked -a "$KAZAA" != checked -a "$GNU" != checked -a "$BIT" != checked -a "$DC" != checked ] ; then
    echo "<font color=#ff2020>WARNING: IPP2P matching is no longer supported. Use L7 filters to match P2P protocols.</font>" > IPT
    exit
    :
    #ISP2P=yes
    #IPT="$IPT -m ipp2p"
    #if [ "$EDK" == checked ] ; then
    #  IPT="$IPT --edk"
    #fi
    #if [ "$KAZAA" == checked ] ; then
    #  IPT="$IPT --kazaa"
    #fi
    #if [ "$GNU" == checked ] ; then
    #  IPT="$IPT --gnu"
    #fi
    #if [ "$BIT" == checked ] ; then
    #  IPT="$IPT --bit"
    #fi
    #if [ "$DC" == checked ] ; then
    #  IPT="$IPT --dc"
    #fi
  fi
  L7PROTOCOL="`cat L7Protocol 2>/dev/null`"
  if [ -n "$L7PROTOCOL" ] ; then
    NOTL7="`cat NotL7 2>/dev/null`"
    IPT="$IPT -m layer7"
    if [ "$NOTL7" == checked ] ; then
      IPT="$IPT !"
    fi
    IPT="$IPT --l7proto $L7PROTOCOL"
  fi
  Protocol="`cat Protocol 2>/dev/null`"
  if ! [ -z "$Protocol" ] ; then
    if [ "`cat NotProtocol 2>/dev/null`" == checked ] ; then
      IPT="$IPT ! -p $Protocol"
    else
      if [ "$Protocol" != 1 -a "$Protocol" != 6 -a "$Protocol" != 17 ] ; then
        IPT="$IPT -p $Protocol"
      else
        if [ "$Protocol" == 1 ] ; then
          ICMPTYPE="`cat ICMPTYPE 2>/dev/null`"
          if ! [ -z "$ICMPTYPE" ] ; then
            NOT="" ; [ "`cat NotICMPTYPE 2>/dev/null`" == checked ] && NOT='!'
            IType="$NOT --icmp-type $ICMPTYPE"
          fi
          IPT="$IPT -p icmp $IType"
        fi
        if [ "$Protocol" == 6 ] ; then
          SourcePort="`cat SourcePort 2>/dev/null`"
          if ! [ -z "$SourcePort" ] ; then
            NOT="" ; [ "`cat NotSourcePort 2>/dev/null`" == checked ] && NOT='!'
            TCPOPR="$TCPOPR $NOT --sport $SourcePort"
          fi
          DestinationPort="`cat DestinationPort 2>/dev/null`"
          if ! [ -z "$DestinationPort" ] ; then
            NOT="" ; [ "`cat NotDestinationPort 2>/dev/null`" == checked ] && NOT='!'
            TCPOPR="$TCPOPR $NOT --dport $DestinationPort"
          fi
          Opt="`cat Opt 2>/dev/null`"
          if ! [ -z "$Opt" ] ; then
            NOT="" ; [ "`cat NotOpt 2>/dev/null`" == checked ] && NOT='!'
            TCPOPR="$TCPOPR $NOT --tcp-option $Opt"
          fi
          SYN="`cat SYN 2>/dev/null`"
          if ! [ -z "$SYN" ] ; then
            TCPFLG="$TCPFLG,SYN"
            if [ "$SYN" == On ] ; then
              TCPFLGon="$TCPFLGon,SYN"
            fi
          fi
          ACK="`cat ACK 2>/dev/null`"
          if ! [ -z "$ACK" ] ; then
            TCPFLG="$TCPFLG,ACK"
            if [ "$ACK" == On ] ; then
              TCPFLGon="$TCPFLGon,ACK"
            fi
          fi
          FIN="`cat FIN 2>/dev/null`"
          if ! [ -z "$FIN" ] ; then
            TCPFLG="$TCPFLG,FIN"
            if [ "$FIN" == On ] ; then
              TCPFLGon="$TCPFLGon,FIN"
            fi
          fi
          RST="`cat RST 2>/dev/null`"
          if ! [ -z "$RST" ] ; then
            TCPFLG="$TCPFLG,RST"
            if [ "$RST" == On ] ; then
              TCPFLGon="$TCPFLGon,RST"
            fi
          fi
          URG="`cat URG 2>/dev/null`"
          if ! [ -z "$URG" ] ; then
            TCPFLG="$TCPFLG,URG"
            if [ "$URG" == On ] ; then
              TCPFLGon="$TCPFLGon,URG"
            fi
          fi
          PSH="`cat PSH 2>/dev/null`"
          if ! [ -z "$PSH" ] ; then
            TCPFLG="$TCPFLG,PSH"
            if [ "$PSH" == On ] ; then
              TCPFLGon="$TCPFLGon,PSH"
            fi
          fi
          if [ "${TCPFLG:0:1}" == ',' ] ; then
            TCPFLG="${TCPFLG:1}"
            if [ "${TCPFLGon:0:1}" == ',' ] ; then
              TCPFLGon="${TCPFLGon:1}"
            else
	      TCPFLGon=NONE
            fi
            NOT="" ; [ "`cat NotFlags 2>/dev/null`" == checked ] && NOT='!'
            TCPOPR="$TCPOPR $NOT --tcp-flags $TCPFLG $TCPFLGon"
          fi
          IPT="$IPT -p tcp $TCPOPR"
        fi
        if [ "$Protocol" == 17 ] ; then
          SourcePortUDP="`cat SourcePortUDP 2>/dev/null`"
          if ! [ -z "$SourcePortUDP" ] ; then
            NOT="" ; [ "`cat NotSourcePortUDP 2>/dev/null`" == checked ] && NOT='!'
            UDPOPR="$UDPOPR $NOT --sport $SourcePortUDP"
          fi
          DestinationPortUDP="`cat DestinationPortUDP 2>/dev/null`"
          if ! [ -z "$DestinationPortUDP" ] ; then
            NOT="" ; [ "`cat NotDestinationPortUDP 2>/dev/null`" == checked ] && NOT='!'
            UDPOPR="$UDPOPR $NOT --dport $DestinationPortUDP"
          fi
          IPT="$IPT -p udp $UDPOPR"
        fi
      fi
    fi
  fi
  PARALLEL="`cat Parallel 2>/dev/null`"
  if [ -n "$PARALLEL" ] ; then
    PARALLELTHAN="`cat ParallelThan 2>/dev/null`"
    IPT="$IPT -m connlimit"
    if [ "$PARALLELTHAN" == less ] ; then
      IPT="$IPT !"
    fi
    IPT="$IPT --connlimit-above $PARALLEL"
  fi
  TRAFFIC="`cat Traffic 2>/dev/null`"
  if [ -n "$TRAFFIC" ] ; then
    TRAFFICTHAN="`cat TrafficThan 2>/dev/null`"
    TRAFFICUNIT="`cat TrafficUnit 2>/dev/null`"
    IPT="$IPT -m connbytes"
    if [ "$TRAFFICTHAN" == less ] ; then
      IPT="$IPT !"
    fi
    if [ "$TRAFFICUNIT" = KB ] ; then
      BYTES=$((TRAFFIC*1024))
    else
      BYTES=$((TRAFFIC*1048576))
    fi
    IPT="$IPT --connbytes $BYTES: --connbytes-dir both --connbytes-mode bytes"
  fi
  IPTPARAMS="`cat IPTPARAMS 2>/dev/null`"
  if  echo "$IPTPARAMS" |grep -q -w '\-j' ; then
    TGT="-j `echo $IPTPARAMS | awk -F'-j' '{print $2}'`"
    IPTPARAMS="`echo $IPTPARAMS | awk -F'-j' '{print $1}'`"
  fi
  IPT="$IPT $IPTPARAMS"
  DSCP="`cat DSCP 2>/dev/null`"
  if [ -n "$DSCP" ] ; then
    IPT="$IPT -mdscp --dscp $DSCP"
  fi
  if [ -z "$TGT" ] ; then
    TARGET="`cat Target 2>/dev/null`"
    if [ "$CHAIN" = NetBalancer ] ; then
      if [ -z "$TARGET" ] ; then
        TARGET=00
      fi
      if [ "$TARGET" = Auto ] ; then
        TGT="-j ACCEPT"
      else
        TGT="-j MARK --set-mark 1$TARGET"
      fi
    else
      if [ "$CHAIN" = QoS ] ; then
        if [ -z "$TARGET" ] ; then
          TARGET=DEFAULT
        fi
        CLASSINDEX="`cat $REGISTER/system/net/QoS/Class/$TARGET/Index 2>/dev/null`"
	[ -z "$CLASSINDEX" ] && exit
        TGT="-j MARK --set-mark $CLASSINDEX"
      else
        if ! [ -z "$TARGET" ] ; then
          if [ "$TARGET" == CHAIN ] ; then
            ChainToJump="`cat ChainToJump 2>/dev/null`"
            if ! [ -z "$ChainToJump" ] ; then
              TGT="-j $ChainToJump"
            fi
          else
            TGT="-j $TARGET"
          fi
          RejectWith="`cat RejectWith 2>/dev/null`"
          if [ "$TARGET" == REJECT -a "$RejectWith" != "" ] ; then
            TGT="$TGT --reject-with $RejectWith"
          fi
        fi
      fi
    fi
  fi
fi
if [ "$OPT" == test ] ; then
  if iptables -v $TABLE  $IPT $TGT >/tmp/fw_makerule.out 2>/tmp/fw_makerule.err ; then
    cat /tmp/fw_makerule.out | head -1 > IPT
    NUM="`iptables $TABLE --line-numbers -n -L $CH |tail -1|awk '{print $1}'`"
    iptables $TABLE -D $CH $NUM
  else
    egrep -v ^Try /tmp/fw_makerule.err >&2
    exit 5
  fi
else
  if [ "$ENABLED" == yes ] ; then
    if [ "`cat LogEnabled 2>/dev/null`" == checked ] ; then
      LogLimit="`cat LogLimit 2>/dev/null`"
      if ! [ -z "$LogLimit" ] ; then
        LogBurst="`cat LogBurst 2>/dev/null`"
        if [ -z "$LogBurst" ] ; then
          LogBurst=0
        fi
        IPTLIMIT="-mlimit --limit $LogLimit/`cat LogLimitSuffix 2>/dev/null` --limit-burst $LogBurst"
      fi
      iptables $TABLE $IPT $IPTLIMIT -j LOG --log-prefix "$CHAIN/$RULE"
    fi
    iptables $TABLE $IPT $TGT
    if [ "$CHAIN" == QoS ] ; then
      TGTDSCP=`cat $REGISTER/system/net/QoS/Class/$TARGET/DSCP 2>/dev/null`
      if [ -n "$TGTDSCP" ] ; then
        iptables $TABLE $IPT -j DSCP --set-dscp $TGTDSCP
      fi
      iptables -t mangle -A QoS -m mark ! --mark 0 -j ACCEPT
    fi
    if [ "$CHAIN" == NetBalancer ] ; then
      [ "$TARGET" != Auto ] && iptables -t mangle -A NetBalancer -m mark ! --mark 0 -j ACCEPT
    fi
  fi
fi
