#!/bin/sh
source /etc/kerbynet.conf
. $SCRIPTS/net.inc
function  UMOUNT () {
  cd /
  umount $AUX 2> /dev/null
  if [ "$ALREADYMOUNTED" == No ] ; then
     umount "$MP" && rmdir "$MP"
  fi
}
function ERROR () {
  cd /
  umount $AUX 2> /dev/null
  rm -rf "$MP/_DB.$NEW/"
  rm -f "$MP/_DB.${NEW}.AUX"
  UMOUNT
  exit 1
}
DEV="$1"
DESCRIPTION="$2"
RESTORE="$3"
SOURCEPART="$4"
SOURCEDB="$5"
HOSTNAME="$6"
LDAPBASE="$7"
K5REALM="$8"
PW="$9"
INTERFACE="${10}"
IP="${11}"
NETMASK="${12}"
GW="${13}"
[ "$DEV" == "" ] && exit 1
NODEV=${DEV:2}
LINE=`df -T -P | grep "$NODEV "`
if [ -z "$LINE" ] ; then 
   MP=/storage/`echo $DEV | sed -e "s/\//_/g"`;
   mkdir -p "$MP"
   mount -o rw "$DEV" "$MP" || exit 1
   ALREADYMOUNTED=No
else 
   MP=`echo $LINE | cut -f7 -d' '`
   mount -oremount,rw "$MP"
   ALREADYMOUNTED=Yes
fi
TYPE=`df -T |grep -w ${MP}$ |awk '{print $2}'`
LAST=`ls $MP |egrep ^_DB\\\.[0123456789][0123456789][0123456789]$ 2>/dev/null  |sort | tail -1 |sed -r "s/_DB\.//" | sed -r "s/^0+//"`
NEW=$((LAST+1))
[ "$NEW" -lt 100 ] && NEW="0$NEW"
[ "$NEW" -lt 10 ] && NEW="0$NEW"
if ! mkdir "$MP/_DB.$NEW" ; then
   ERROR
fi
if ! mkdir -p "$MP/_DB.$NEW/.settings" ; then
   ERROR
fi
if [ "$RESTORE" == New ] ; then
  tar --directory "$MP/_DB.$NEW/" -xjf "$DBTEMPLATE" 2>/dev/null || ERROR
  echo "Never" > "$MP/_DB.$NEW/.settings/LastBackup"
  rm -f "$MP/_DB.$NEW/.settings/LastActivation" .Settings/Active
  echo "$DESCRIPTION" > "$MP/_DB.$NEW/.settings/Description"
  echo "$HOSTNAME" > "$MP/_DB.$NEW/$REGISTER/system/misc/hostname"
  echo "$K5REALM" > "$MP/_DB.$NEW/$REGISTER/system/k5/realm"
  mv "$MP/_DB.$NEW/$REGISTER/system/radius/proxy/realms/EXAMPLE.COM/" "$MP/_DB.$NEW/$REGISTER/system/radius/proxy/realms/$K5REALM"
  echo "$LDAPBASE" > "$MP/_DB.$NEW/$REGISTER/system/ldap/base"
  echo "$PW" > "$MP/_DB.$NEW/$REGISTER/system/ldap/rootpw"
  rm -rf $MP/_DB.$NEW/$REGISTER/system/net/FW/Chains/
  rm -rf $MP/_DB.$NEW/$REGISTER/system/net/interfaces/*
  mkdir -p $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/IP/00
  echo up > $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/STATUS
  echo $IP> $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/IP/00/IP
  echo $NETMASK> $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/IP/00/Netmask
  mkdir $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/MAC/
  touch $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/MAC/`getmac $INTERFACE`
  echo up > $MP/_DB.$NEW/$REGISTER/system/net/interfaces/$INTERFACE/IP/00/STATUS

  mkdir "$MP/_DB.$NEW/$REGISTER/system/ssh/"
  echo no > $MP/_DB.$NEW/$REGISTER/system/ssh/Enabled
  NETWORK=`ipcalc -n $IP/$NETMASK |grep ^Network: |awk '{print $2}'`
  echo "${NETWORK}:" > $MP/_DB.$NEW/$REGISTER/system/ssh/ACL 
  rm -rf $MP/_DB.$NEW/$REGISTER/system/net/router/Statics/*
  if ! [ -z "$GW" ] ; then
    ROUTEPATH=$MP/_DB.$NEW/$REGISTER/system/net/router/Statics/0000000000_0000000000_2147483648
    mkdir -p $ROUTEPATH
    echo 0.0.0.0 > $ROUTEPATH/Dest
    echo $GW > $ROUTEPATH/Gateway
    echo > $ROUTEPATH/Interface
    echo  0 > $ROUTEPATH/Metric
    echo 0.0.0.0 > $ROUTEPATH/Netmask
    echo Net > $ROUTEPATH/RouteType
    echo GW > $ROUTEPATH/Via
  fi

  $SCRIPTS/createLDAPDB "$MP/_DB.$NEW/var/openldap-data" "$LDAPBASE" "$PW" "$HOSTNAME" CREATE "$IP"
  rm -f $MP/_DB.$NEW/var/kerberos/krb5kdc/* $MP/_DB.$NEW/var/kerberos/krb5kdc/.*
  SSLDIR="$MP/_DB.$NEW/etc/ssl/"
  pushd "$SSLDIR" >/dev/null
  rm -rf previous
  mkdir  previous
  rm -rf $(cd template ; echo *) 
  cp -a template/* .
  popd >/dev/null
fi
if [ "$RESTORE" == Restore ] ; then
    cd $MP/_DB.$NEW/ || ERROR
    egrep -v "=================$" | uudecode | tar xfz - 2>/dev/null || ERROR
    rm -f .settings/LastActivation
    rm -f .settings/LastBackup
    rm -f .Settings/Active
    cd /
fi
if [ "$RESTORE" == Copy ] ; then
   cd $MP/_DB.$NEW/ || ERROR
   if $SCRIPTS/backupdb "$SOURCEPART" "$SOURCEDB" |tar xf - 2>/dev/null ; then
      rm -f .settings/LastActivation
      rm -f .settings/LastBackup
      rm -f .Settings/Active
      cd /   
   else
      cd /
      rm -rf $MP/_DB.$NEW/
      ERROR
   fi
fi


UMOUNT
echo _DB.$NEW


