#!/bin/sh
. /etc/kerbynet.conf
function create_subnet {
  SUBNETS=`ls -d [0123456789][0123456789] 2>/dev/null`
  for S in $SUBNETS ; do
    ENABLED="`cat $S/Enabled 2>/dev/null`"
    if [ "$ENABLED" == yes ] ; then
      NETWORK="`cat $S/Network`"
      NETMASK="`cat $S/Netmask`"
      DefaultLeaseDays="`cat $S/DefaultLeaseDays`"
      DefaultLeaseHours="`cat $S/DefaultLeaseHours`"
      DefaultLeaseMinutes="`cat $S/DefaultLeaseMinutes`"
      MaxLeaseDays="`cat $S/MaxLeaseDays`"
      MaxLeaseHours="`cat $S/MaxLeaseHours`"
      MaxLeaseMinutes="`cat $S/MaxLeaseMinutes`"
      Range1Min="`cat $S/Range1Min`"
      Range1Max="`cat $S/Range1Max`"
      Range2Min="`cat $S/Range2Min`"
      Range2Max="`cat $S/Range2Max`"
      Range3Min="`cat $S/Range3Min`"
      Range3Max="`cat $S/Range3Max`"
      Router="`cat $S/Router`"
      DNS1="`cat $S/DNS1`"
      DNS2="`cat $S/DNS2`"
      DNS3="`cat $S/DNS3`"
      DNS=""
      Domain="`cat $S/Domain`"
      NIS="`cat $S/NIS`"
      NTP1="`cat $S/NTP1`"
      NTP2="`cat $S/NTP2`"
      NTP=""
      WINS1="`cat $S/WINS1`"
      WINS2="`cat $S/WINS2`"
      WINS=""
      echo "subnet $NETWORK netmask $NETMASK {"
      if ! [ -z "$Router" ] ; then
        echo "  option routers $Router;"
        echo "  option subnet-mask $NETMASK;"
      fi
      if ! [ -z "$NIS" ] ; then
        echo "  option nis-domain \"$NIS\";"
      fi
      if ! [ -z "$Domain" ] ; then
        echo "  option domain-name \"$Domain\";"
      fi
      if ! [ -z "$DNS1" ] ; then
        DNS=$DNS1
        COMMA=","
      fi
      if ! [ -z "$DNS2" ] ; then
        DNS="$DNS$COMMA $DNS2"
        COMMA=","
      fi
      if ! [ -z "$DNS3" ] ; then
        DNS="$DNS$COMMA $DNS3"
      fi
      if [ "$DNS" != "" ] ; then
        echo "  option domain-name-servers $DNS;"
      fi
      COMMA=""
      if ! [ -z "$NTP1" ] ; then
        NTP=$NTP1
        COMMA=","
      fi
      if ! [ -z "$NTP2" ] ; then
        NTP="$NTP$COMMA $NTP2"
        COMMA=","
      fi
      if [ "$NTP" != "" ] ; then
        echo "  option ntp-servers $NTP;"
      fi
      COMMA=""
      if ! [ -z "$WINS1" ] ; then
        WINS=$WINS1
        COMMA=","
      fi
      if ! [ -z "$WINS2" ] ; then
        WINS="$WINS$COMMA $WINS2"
        COMMA=","
      fi
      if [ "$WINS" != "" ] ; then
        echo "  option netbios-name-servers $WINS;"
      fi
      PARAMETERS="`cat $S/Parameters 2>/dev/null`"
      if [ -n "$PARAMETERS" ] ; then
        cat $S/Parameters
      fi
      if [ "${DefaultLeaseDays:0:1}" == 0 ] ; then
        DefaultLeaseDays=${DefaultLeaseDays:1:1}
      fi
      if [ "${DefaultLeaseHours:0:1}" == 0 ] ; then
        DefaultLeaseHours=${DefaultLeaseHours:1:1}
      fi
      if [ "${DefaultLeaseMinutes:0:1}" == 0 ] ; then
        DefaultLeaseMinutes=${DefaultLeaseMinutes:1:1}
      fi
      DefaultLease=$((DefaultLeaseDays*86400+DefaultLeaseHours*3600+DefaultLeaseMinutes*60))
      echo "  default-lease-time $DefaultLease;"
      if [ "${MaxLeaseDays:0:1}" == 0 ] ; then
        MaxLeaseDays=${MaxLeaseDays:1:1}
      fi
      if [ "${MaxLeaseHours:0:1}" == 0 ] ; then
        MaxLeaseHours=${MaxLeaseHours:1:1}
      fi
      if [ "${MaxLeaseMinutes:0:1}" == 0 ] ; then
        MaxLeaseMinutes=${MaxLeaseMinutes:1:1}
      fi
      MaxLease=$((MaxLeaseDays*86400+MaxLeaseHours*3600+MaxLeaseMinutes*60))
      echo "  max-lease-time $MaxLease;"
      if [ "$Range1Min" != "" -a "$Range1Max" != "" ] ; then
        echo "  range $Range1Min $Range1Max;"
      fi
      if [ "$Range2Min" != "" -a "$Range2Max" != "" ] ; then
        echo "  range $Range2Min $Range2Max;"
      fi
      if [ "$Range3Min" != "" -a "$Range3Max" != "" ] ; then
        echo "  range $Range3Min $Range3Max;"
      fi
      STATICS=`ls $S/Statics 2> /dev/null`
      for E in $STATICS ; do
        IP=`cat $S/Statics/$E/IP`
        MAC=`cat $S/Statics/$E/MAC`
        echo "  host $E {"
        echo "    hardware ethernet ${MAC};"
        echo "    fixed-address ${IP};"
        cat $S/Statics/$E/Parameters 2>/dev/null
        echo "  }" 
      done
      echo "}"
    fi
  done
}
TMPSUBNETS=/tmp/subnets
cat <<EOF
authoritative;
ddns-update-style interim;
ignore client-updates;
EOF
cd $TMPSUBNETS 
create_subnet
SHAREDNETWORKS=`ls -d SN_* 2>/dev/null`
for H in $SHAREDNETWORKS ; do
  cd $TMPSUBNETS/$H
  echo "shared-network $H {"
  create_subnet
  echo "}"
done
