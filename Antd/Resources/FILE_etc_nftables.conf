flush ruleset;
flush ruleset;
flush ruleset;
flush ruleset;
flush ruleset;
flush ruleset;
table ip filter {
        set connstatefull {
                type ct_state
                elements = { established, related, new}
        }
        set connstatenew {
                type ct_state
                elements = { new}
        }
        set intifs {
                type iface_index
                elements = { br1, lo, br0}
        }
        set extifs {
                type iface_index
                elements = { eth4, eth3}
        }
        set allifs {
                type iface_index
                elements = { br1, eth4, eth3, br0, lo}
        }
        set iifaddr {
                type ipv4_addr
                elements = { 127.0.0.1, 10.1.19.1, 10.99.19.1}
        }
        set eifaddr {
                type ipv4_addr
                elements = { 192.168.111.2, 192.168.222.2 }
        }
        set protoset {
                type inet_proto
                elements = { esp, udp, icmp, ah }
        }
        set protoset6 {
                type icmpv6_type
                flags constant
                elements = { nd-neighbor-solicit, echo-request}
        }
        set tcpportset {
                type inet_service
                elements = { 22, 25, 53, 80, 88, 137, 138, 139, 389, 636, 123, 443, 445, 465, 555, 587, 953, 993, 1193, 1194, 1195, 1514, 1723, 5222, 5223, 5900, 8000, 8081, 8084, 8085, 8443 }
        }
        set udpportset {
                type inet_service
                elements = { 53, 67, 68, 88, 123, 500, 514, 953, 1193, 1194, 1195, 1701, 4500, 5355}
        }
        set pubsvcset {
                type inet_service
                elements = { 80, 443, 8085 }
        }
        chain input {
                type filter hook input priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I4AccTfilCinRctinvalid " accept
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                tcp dport ssh accept
                tcp dport 722 iif @extifs ct state @connstatenew log prefix "fp=SSH:0 a=I4AccTfilCinRsshnewwan " accept
                tcp dport @tcpportset accept
                iif @intifs accept
                iif @extifs log prefix "a=I4AccTfilCinRwan " accept
                log prefix "a=I4AccTfilCinRdefNC " accept
        }
        chain output {
                type filter hook output priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I4AccTfilCouRctinvalid " accept
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                iif @intifs accept
                iif @intifs oif @allifs accept
                oif @extifs log prefix "a=I4AccTfilCouRwan " accept
                log prefix "a=I4AccTfilCouRdefNC " accept
        }
        chain forward {
                type filter hook forward priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I4AccTfilCfwRctinvalid " accept
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                iif @intifs oif @allifs accept
                iif @extifs log prefix "a=I4AccTfilCfwRwan " accept
                log prefix "a=I4AccTfilCfwRdefNC " accept
        }
}
table ip nat {
        set intifs {
                type iface_index
                elements = { br1, lo, br0}
        }
        set extif01 {
                type iface_index
                elements = { eth4}
        }
        set extif02 {
                type iface_index
                elements = { eth3}
        }
        set extifs {
                type iface_index
                elements = { eth4, eth3}
        }
        chain prerouting {
                type nat hook prerouting priority 0; policy accept;
                iif @extifs tcp dport 22 dnat 10.1.3.195:22
                iif @extifs tcp dport 80 dnat 10.1.3.195:80
                iif @extifs tcp dport 443 dnat 10.1.3.195:443
                iif @extifs tcp dport 722 dnat 192.168.111.2:22
        }
        chain postrouting {
                type nat hook postrouting priority 0; policy accept;
                iif @intifs oif @extif01 snat 192.168.111.2
                iif @intifs oif @extif02 snat 192.168.222.2
                oif @extifs masquerade
        }
}
table ip6 filter6 {
        set connstatefull {
                type ct_state
                elements = { established, related, new}
        }
        set connstatenew {
                type ct_state
                elements = { new}
        }
        set intifs {
                type iface_index
                elements = { br1, lo, br0}
        }
        set extifs {
                type iface_index
                elements = { eth4, eth3}
        }
        set allifs {
                type iface_index
                elements = { br1, eth4, eth3, br0, lo}
        }
        set protoset {
                type inet_proto
                elements = { esp, udp, icmp, ah }
        }
        set protoset6 {
                type icmpv6_type
                flags constant
                elements = { nd-neighbor-solicit, echo-request}
        }
        set tcpportset {
                type inet_service
                elements = { 22, 25, 53, 80, 88, 137, 138, 139, 389, 636, 123, 443, 445, 465, 555, 587, 953, 993, 1193, 1194, 1195, 1723, 5222, 5223, 5900, 8000, 8081, 8084, 8085, 8443 }
        }
        set udpportset {
                type inet_service
                elements = { 53, 67, 68, 88, 123, 500, 953, 1193, 1194, 1195, 1701, 4500, 5355}
        }
        set pubsvcset {
                type inet_service
                elements = { 80, 443, 8085 }
        }
        chain input {
                type filter hook input priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I6AccTfilCinRctinvalid " accept
                ip6 nexthdr ipv6-icmp accept
                icmpv6 type @protoset6 accept
                icmpv6 type echo-request accept
                udp dport @udpportset accept
                tcp dport ssh accept
                tcp dport 722 iif { eth4, eth3 } ct state @connstatenew log prefix "fp=SSH:0 a=I6AccTfilCinRsshnewwan " accept
                tcp dport @tcpportset accept
                iif @intifs accept
                iif @extifs log prefix "a=I4AccTfilCinRwan " accept
                log prefix "a=I6AccTfilCinRdefNC " accept
        }
        chain output {
                type filter hook output priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I6DroTfilCouRctinvalid " drop
                icmpv6 type echo-request accept
                udp dport @udpportset accept
                iif @intifs accept
                iif @intifs oif @allifs accept
                oif @extifs log prefix "a=I6AccTfilCouRwan " accept
                log prefix "a=I6accTfilCouRdefNC " accept
        }
        chain forward {
                type filter hook forward priority 0; policy drop;
                ct state @connstatefull accept
                ct state invalid log prefix "a=I4AccTfilCfwRctinvalid " accept
                icmpv6 type echo-request accept
                udp dport @udpportset accept
                iif @intifs oif @allifs accept
                iif @extifs log prefix "a=I6AccTfilCfwRwan " accept
                log prefix "a=I6AccTfilCfwRdefNC " accept
        }
}
table ip6 nat6 {
        set extifs {
                type iface_index
                elements = { eth4, eth3}
        }
        chain prerouting {
                type nat hook prerouting priority 0; policy accept;
        }
        chain postrouting {
                type nat hook postrouting priority 0; policy accept;
                oif @extifs masquerade
        }
}
