flush ruleset;
table ip filter {
	chain input {
		type filter hook input priority 0;
		#start_ip_filter_input
		ct state $ip_filter_input_state accept
		ct state invalid counter log prefix "a=Ip4DroTfilCinRctinvalid " drop
		ip protocol $ip_filter_input_protoset accept
		icmp type echo-request accept
		udp dport $ip_filter_input_udpportset accept
		iif $ip_filter_input_iif accept
		tcp dport ssh accept
		tcp dport $ip_filter_input_tcpportset accept
		ip daddr $ip_filter_input_eifaddr ct state $ip_filter_input_daddrstate accept
		ip saddr $ip_filter_input_iifaddr accept
		ip saddr $ip_filter_output_eifaddr accept
		ip saddr $ip_filter_input_saddrnetaccept accept
		ip daddr $ip_filter_input_ipddaddrnetaccep accept
		ip daddr $ip_filter_input_eifaddr tcp dport $ip_filter_input_pubsvcset accept
		ip saddr $ip_filter_input_wanifaddr ip daddr $ip_filter_input_saddripdrop drop
		counter log prefix "a=Ip4DroTfilCinRdef " drop
		#end_ip_filter_input
	}

	chain output {
		type filter hook output priority 0;
		#start_ip_filter_output
		ct state $ip_filter_output_state accept
		ct state invalid counter log prefix "a=Ip4AccTfilCouRctinvalid " accept
		ip protocol $ip_filter_output_protoset accept
		icmp type echo-request accept
		udp dport $ip_filter_output_udpportset accept
		iif $ip_filter_output_iif accept
		oif $ip_filter_output_oif ct state new accept
		ip saddr $ip_filter_output_iifaddr accept
		ip saddr $ip_filter_output_eifaddr accept
		ip saddr $ip_filter_output_saddrnetaccept accept
		ip daddr $ip_filter_output_daddrnetaccept accept
		counter log prefix "a=Ip4DroTfilCouRdef " drop
		#end_ip_filter_output
	}

	chain forward {
		type filter hook forward priority 0;
		#start_ip_filter_forward
		ct state $ip_filter_forward_state accept
		ct state invalid counter log prefix "a=Ip4AccTfilCfwRctinvalid " accept
		ip protocol $ip_filter_forward_protoset accept
		icmp type echo-request accept
		udp dport $ip_filter_forward_udpportset accept
		iif $ip_filter_forward_iif accept
		iif $ip_filter_forward_iif oif $ip_filter_forward_oif accept
		ipip saddr $ip_filter_forward_iifaddr accept
		ipip daddr $ip_filter_forward_iifaddr tcp dport $ip_filter_forward_tcpportset accept
		ip daddr $ip_filter_forward_iifaddr udp dport $ip_filter_forward_udpportset accept
		ip daddr $ip_filter_forward_iifaddr iif $ip_filter_input_iifdaddraccept accept
		iif $ip_filter_forward_iifaccept $ip_filter_forward_ipoifaccept accept
		iif $ip_filter_forward_iptcpiif1 oif $ip_filter_forward_iptcpoif1 ip daddr $ip_filter_forward_iptcpdaddr1 tcp dport $ip_filter_forward_iptcpport1 accept
		iif $ip_filter_forward_iptcpiif2 oif $ip_filter_forward_iptcpoif2 ip daddr $ip_filter_forward_iptcpdaddr2 tcp dport $ip_filter_forward_iptcpport2 accept
		iif $ip_filter_forward_oifdrop ct state new counter log prefix "a=DroTfilCfwRctnewwan " drop
		counter log prefix "a=Ip4DroTfilCfwRdef " drop
		#end_ip_filter_forward
	}
}
table ip nat {
	chain prerouting {
		type nat hook prerouting priority 0;
		#start_ip_nat_prerouting
		iif $ip_nat_prerouting_iif1 tcp dport $ip_nat_prerouting_port1 dnat $ip_nat_prerouting_dnat1
		iif $ip_nat_prerouting_iif2 tcp dport $ip_nat_prerouting_port2 dnat $ip_nat_prerouting_dnat2
		tcp dport $ip_nat_prerouting_portredirect redirect to $ip_nat_prerouting_portredirectto
		accept
		#end_ip_nat_prerouting
	}

	chain input {
		type nat hook input priority 0;
		#start_ip_nat_input
		accept
		#end_ip_nat_input
	}

	chain output {
		type nat hook output priority 0;
		#start_ip_nat_output
		accept
		#end_ip_nat_output
	}

	chain postrouting {
		type nat hook postrouting priority 0;
		#start_ip_nat_postrouting
		ip saddr $ip_nat_postrouting_net1 oif $ip_nat_postrouting_oif1 snat $ip_nat_postrouting_ip1
		ip saddr $ip_nat_postrouting_net2 oif $ip_nat_postrouting_oif2 snat $ip_nat_postrouting_ip2
		masquerade
		oif $ip_nat_postrouting_oifmask ip saddr $ip_nat_postrouting_netmask masquerade
		accept
		#end_ip_nat_postrouting
	}
}

table ip6 filter6 {
	chain input {
		type filter hook input priority 0;
		#start_ip6_filter_input
		ct state { established, related} accept
		ct state invalid counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCinRctinvalid " drop
		ip6 nexthdr ipv6-icmp accept
		icmpv6 type { echo-request, nd-neighbor-solicit} accept
		iif { br1, br0, lo} accept
		iif { br1, br0, lo} ct state new accept
		iif { br1, br0} tcp sport { ftp, ftp-data} ct state new accept
		tcp dport { ssh, http} accept
		counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCinRdef " drop
		#end_ip6_filter_input
	}

	chain output {
		type filter hook output priority 0;
		#start_ip6_filter_output
		ct state { established, related} accept
		ct state invalid counter packets 0 bytes 0 log prefix "a=Ip4DroTfilCouRctinvalid " drop
		iif { br0, br1, lo} accept
		iif { br1, br0, lo} ct state new accept
		oif { eth11, lo, eth10} accept
		counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCouRdef " drop
		#end_ip6_filter_output
	}

	chain forward {
		type filter hook forward priority 0;
		#start_ip6_filter_forward
		counter log prefix "a=Ip6DroTfilCfwRdef " drop
		#end_ip6_filter_forward
	}
}
table ip6 nat6 {
	chain prerouting {
		type nat hook prerouting priority 0;
		#start_ip6_nat_prerouting
		accept
	}

	chain input {
		type nat hook input priority 0;
		#start_ip6_nat_input
		accept
		#end_ip6_nat_input
	}

	chain output {
		type nat hook output priority 0;
		#start_ip6_nat_output
		accept
		#end_ip6_nat_output
	}

	chain postrouting {
		type nat hook postrouting priority 0;
		#start_ip6_nat_postrouting
		accept
		#end_ip6_nat_postrouting
	}
}
