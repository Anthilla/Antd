flush ruleset;
table ip filter {
        set iifaddr {
                type ipv4_addr
                elements = { 127.0.0.1, 10.1.19.1, 10.99.19.1, 10.15.1.1 }
        }

        set eifaddr {
                type ipv4_addr
                elements = { 192.168.222.2, 192.168.111.2}
        }

        set wanifaddr {
                type ipv4_addr
                elements = { 192.168.222.1, 192.168.111.1}
        }

        set protoset {
                type inet_proto
                elements = { esp, udp, icmp, ah }
        }

        set tcpportset {
                type inet_service
                elements = { 22, 53, 80, 123, 443, 465, 587, 953, 993, 1193, 1194, 1195, 1723, 5222, 5223, 5900, 8000, 8081, 8443, 22001 }
        }

        set udpportset {
                type inet_service
                elements = { 53, 67, 68, 123, 500, 953, 1193, 1194, 1195, 1701, 4500 }
        }

        set pubsvcset {
                type inet_service
                elements = { 25, 465, 993, 1193, 1194, 1195, 443 }
        }

        chain input {
                type filter hook input priority 0;
                ct state { related, established} accept
                ct state invalid counter log prefix "a=Ip4DroTfilCinRctinvalid " drop
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                iif { lo, br0, br1 } accept
                tcp dport ssh accept
                tcp dport @tcpportset accept
                ip daddr @eifaddr ct state { related, established} accept
                ip saddr @iifaddr accept
                ip saddr @eifaddr accept
                ip saddr { 10.1.0.0/16, 10.15.1.0/24, 10.99.0.0/16 } accept
                ip daddr { 10.1.0.0/16, 10.15.1.0/24, 10.99.0.0/16 } accept
                ip daddr @eifaddr tcp dport @pubsvcset accept
                ip saddr @wanifaddr ip daddr { 224.0.0.1 } drop
                counter log prefix "a=Ip4DroTfilCinRdef " drop
        }

        chain output {
                type filter hook output priority 0;
                ct state { new, established, related} accept
                ct state invalid counter log prefix "a=Ip4AccTfilCouRctinvalid " accept
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                iif { lo, br0, br1 } accept
                oif { eth11, eth10, lo } ct state new accept
                ip saddr @iifaddr accept
                ip saddr @eifaddr accept
                ip saddr { 10.1.0.0/16, 10.15.1.0/24, 10.99.0.0/16 } accept
                ip daddr { 10.1.0.0/16, 10.15.1.0/24, 10.99.0.0/16 } accept
                counter log prefix "a=Ip4DroTfilCouRdef " drop
        }

        chain forward {
                type filter hook forward priority 0;
                ct state { established, related} accept
                ct state invalid counter log prefix "a=Ip4AccTfilCfwRctinvalid " accept
                ip protocol @protoset accept
                icmp type echo-request accept
                udp dport @udpportset accept
                iif { lo } accept
                iif { lo} oif { lo} accept
                ip saddr @iifaddr accept
                ip daddr @iifaddr tcp dport @tcpportset accept
                ip daddr @iifaddr udp dport @udpportset accept
                ip daddr @iifaddr iif { br0, br1 } accept
                iif { br0, br1 } oif { eth10, eth11, br1, br0 } accept
                iif { eth10, eth11} oif { br1, br0} ip daddr 10.1.19.4 tcp dport 8081 accept
                iif { eth11, eth10} oif { br1, br0} ip daddr 10.99.19.2 tcp dport 8081 accept
                iif { eth10, eth11 } ct state new counter log prefix "a=DroTfilCfwRctnewwan " drop
                counter log prefix "a=Ip4DroTfilCfwRdef " drop
        }

}
table ip nat {
        chain prerouting {
                 type nat hook prerouting priority 0;
                 iif { eth11, eth10} tcp dport { 80 } dnat 10.1.19.4:8081
                 iif { eth10, eth11} tcp dport { 8081 } dnat 10.99.19.2:8081
                 tcp dport 680 redirect to 555
                 accept
        }

        chain input {
                 type nat hook input priority 0;
                 accept
        }

        chain output {
                 type nat hook output priority 0;
                 accept
        }

        chain postrouting {
                 type nat hook postrouting priority 0;
                 ip saddr { 10.1.0.0/16, 10.99.0.0/16} oif { eth10} snat 192.168.111.2
                 ip saddr { 10.1.0.0/16, 10.99.0.0/16} oif { eth11} snat 192.168.222.2
                 masquerade
                 oif { eth11, eth10} ip saddr { 10.1.0.0/16, 10.99.0.0/16} masquerade
                 accept
        }
}

table ip6 filter6 {
        chain input {
                 type filter hook input priority 0;
                 ct state { established, related} accept
                 ct state invalid counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCinRctinvalid " drop
                 ip6 nexthdr ipv6-icmp accept
                 icmpv6 type { echo-request, nd-neighbor-solicit} accept
                 iif { br1, br0, lo} accept
                 iif { br1, br0, lo} ct state new accept
                 iif { br1, br0} tcp sport { ftp, ftp-data} ct state new accept
                 tcp dport { ssh, http} accept
                 counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCinRdef " drop
        }

        chain output {
                 type filter hook output priority 0;
                 ct state { established, related} accept
                 ct state invalid counter packets 0 bytes 0 log prefix "a=Ip4DroTfilCouRctinvalid " drop
                 iif { br0, br1, lo} accept
                 iif { br1, br0, lo} ct state new accept
                 oif { eth11, lo, eth10} accept
                 counter packets 0 bytes 0 log prefix "a=Ip6DroTfilCouRdef " drop
        }

        chain forward {
                 type filter hook forward priority 0;
                 counter log prefix "a=Ip6DroTfilCfwRdef " drop
        }
}
table ip6 nat6 {
        chain prerouting {
                 type nat hook prerouting priority 0;
                 accept
        }

        chain input {
                 type nat hook input priority 0;
                 accept
        }

        chain output {
                 type nat hook output priority 0;
                 accept
        }

        chain postrouting {
                 type nat hook postrouting priority 0;
                 accept
        }
}
