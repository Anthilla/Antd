@*
    //-------------------------------------------------------------------------------------
    //     Copyright (c) 2014, Anthilla S.r.l. (http://www.anthilla.com)
    //     All rights reserved.
    //
    //     Redistribution and use in source and binary forms, with or without
    //     modification, are permitted provided that the following conditions are met:
    //         * Redistributions of source code must retain the above copyright
    //           notice, this list of conditions and the following disclaimer.
    //         * Redistributions in binary form must reproduce the above copyright
    //           notice, this list of conditions and the following disclaimer in the
    //           documentation and/or other materials provided with the distribution.
    //         * Neither the name of the Anthilla S.r.l. nor the
    //           names of its contributors may be used to endorse or promote products
    //           derived from this software without specific prior written permission.
    //
    //     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    //     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    //     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    //     DISCLAIMED. IN NO EVENT SHALL ANTHILLA S.R.L. BE LIABLE FOR ANY
    //     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    //     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    //     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    //     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    //     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    //     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    //
    //     20141110
    //-------------------------------------------------------------------------------------*@

@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@{Layout = "_layout.cshtml";}

@section PageBar {

}

@section MainContent {
    <div id="CollectdDataContainer" style="width: 100%; height: 500px; overflow: scroll !important;">
        <table class="table">
            <tbody id="CollectdData"></tbody>
        </table>
    </div>
    <hr />
    <svg id="visualisation" width="1000" height="250"></svg>
    <hr />
}

@section Scripts {
    <script type="text/javascript">

        $(function () {
            var connection = $.hubConnection();
            var proxy = connection.createHubProxy('CollectdHub');
            connection.start();

            proxy.on('getCollectdRefresh', function (list) {
                $.each(list, function (i, data) {
                    var container = $('#CollectdData');
                    var row = '<tr><td style="width: 40%;">';
                    if (data.Plugin.length > 0) {
                        row += '<p style="padding: 4px 10px; margin-right: 5px; display: inline-block !important; " class="bg-anthilla-violet">' + data.Plugin + '</p>';
                    }
                    if (data.PluginInstance.length > 0) {
                        row += '<p style="padding: 4px 10px; margin-right: 5px; display: inline-block !important; " class="bg-anthilla-violet">' + data.PluginInstance + '</p>';
                    }
                    if (data.Type.length > 0) {
                        row += '<p style="padding: 4px 10px; margin-right: 5px; display: inline-block !important; " class="bg-anthilla-violet">' + data.Type + '</p>';
                    }
                    if (data.TypeInstance.length > 0) {
                        row += '<p style="padding: 4px 10px; margin-right: 5px; display: inline-block !important; " class="bg-anthilla-violet">' + data.TypeInstance + '</p>';
                    }
                    row += '</td>';
                    row += '<td>' + data.Values + '</td>';
                    row += '<td style="width: 100px;">' + data.Date + '</td>';
                    row += '</tr>';
                    container.append(row);
                    container.scrollTop = container.scrollHeight;
                });
            });
        });
        var data = [];

        $('input[type="button"]').click(function () {
            var x = $('input[name="x"]').val();
            var y = $('input[name="y"]').val();
            var obj = {
                'x': x,
                'y': y
            };
            data.push(obj);
            d3.selectAll("svg > *").remove();
            InitChart(data);
        });

        InitChart(data);

        function InitChart(list) {
            var lineData = list;

            var vis = d3.select("#visualisation"),
              WIDTH = 1000,
              HEIGHT = 250,
              MARGINS = {
                  top: 20,
                  right: 20,
                  bottom: 20,
                  left: 50
              },
              xRange = d3.scale.linear().range([MARGINS.left, WIDTH - MARGINS.right]).domain([d3.min(lineData, function (d) {
                  return d.x;
              }),
                d3.max(lineData, function (d) {
                    return d.x;
                })
              ]),

              yRange = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([d3.min(lineData, function (d) {
                  return d.y;
              }),
                d3.max(lineData, function (d) {
                    return d.y;
                })
              ]),

              xAxis = d3.svg.axis()
              .scale(xRange)
              .tickSize(5)
              .tickSubdivide(true),

              yAxis = d3.svg.axis()
              .scale(yRange)
              .tickSize(5)
              .orient("left")
              .tickSubdivide(true);

            vis.append("svg:g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
              .call(xAxis);

            vis.append("svg:g")
              .attr("class", "y axis")
              .attr("transform", "translate(" + (MARGINS.left) + ",0)")
              .call(yAxis);

            var lineFunc = d3.svg.line()
              .x(function (d) {
                  return xRange(d.x);
              })
              .y(function (d) {
                  return yRange(d.y);
              })
              .interpolate('linear');

            vis.append("svg:path")
              .attr("d", lineFunc(lineData))
              .attr("stroke", "green")
              .attr("stroke-width", 2)
              .attr("fill", "none");
        }

    </script>
}